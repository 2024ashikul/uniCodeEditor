import {
  __commonJS,
  __esm,
  __export,
  __privateAdd,
  __privateGet,
  __privateSet,
  __publicField,
  __toCommonJS
} from "./chunk-5IKWDFCZ.js";

// ../../../node_modules/tslib/tslib.es6.mjs
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __addDisposableResource: () => __addDisposableResource,
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __disposeResources: () => __disposeResources,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __rewriteRelativeImportExtension: () => __rewriteRelativeImportExtension,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
  default: () => tslib_es6_default
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access) context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done) throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0) continue;
      if (result === null || typeof result !== "object") throw new TypeError("Object expected");
      if (_ = accept(result.get)) descriptor.get = _;
      if (_ = accept(result.set)) descriptor.set = _;
      if (_ = accept(result.init)) initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field") initializers.unshift(_);
      else descriptor[key] = _;
    }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function awaitReturn(f) {
    return function(v) {
      return Promise.resolve(v).then(f, reject);
    };
  }
  function verb(n, f) {
    if (g[n]) {
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
      if (f) i[n] = f(i[n]);
    }
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) {
    for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() {
      try {
        inner.call(this);
      } catch (e) {
        return Promise.reject(e);
      }
    };
    env.stack.push({ value, dispose, async });
  } else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}
function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  var r, s = 0;
  function next() {
    while (r = env.stack.pop()) {
      try {
        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
        if (r.dispose) {
          var result = r.dispose.call(r.value);
          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) {
            fail(e);
            return next();
          });
        } else s |= 1;
      } catch (e) {
        fail(e);
      }
    }
    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
    if (env.hasError) throw env.error;
  }
  return next();
}
function __rewriteRelativeImportExtension(path, preserveJsx) {
  if (typeof path === "string" && /^\.\.?\//.test(path)) {
    return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function(m, tsx, d, ext, cm) {
      return tsx ? preserveJsx ? ".jsx" : ".js" : d && (!ext || !cm) ? m : d + ext + "." + cm.toLowerCase() + "js";
    });
  }
  return path;
}
var extendStatics, __assign, __createBinding, __setModuleDefault, ownKeys, _SuppressedError, tslib_es6_default;
var init_tslib_es6 = __esm({
  "../../../node_modules/tslib/tslib.es6.mjs"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    tslib_es6_default = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __esDecorate,
      __runInitializers,
      __propKey,
      __setFunctionName,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources,
      __rewriteRelativeImportExtension
    };
  }
});

// ../../../node_modules/reflect-metadata/Reflect.js
var require_Reflect = __commonJS({
  "../../../node_modules/reflect-metadata/Reflect.js"() {
    var Reflect2;
    (function(Reflect3) {
      (function(factory) {
        var root = typeof globalThis === "object" ? globalThis : typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : sloppyModeThis();
        var exporter = makeExporter(Reflect3);
        if (typeof root.Reflect !== "undefined") {
          exporter = makeExporter(root.Reflect, exporter);
        }
        factory(exporter, root);
        if (typeof root.Reflect === "undefined") {
          root.Reflect = Reflect3;
        }
        function makeExporter(target, previous) {
          return function(key, value) {
            Object.defineProperty(target, key, { configurable: true, writable: true, value });
            if (previous)
              previous(key, value);
          };
        }
        function functionThis() {
          try {
            return Function("return this;")();
          } catch (_) {
          }
        }
        function indirectEvalThis() {
          try {
            return (void 0, eval)("(function() { return this; })()");
          } catch (_) {
          }
        }
        function sloppyModeThis() {
          return functionThis() || indirectEvalThis();
        }
      })(function(exporter, root) {
        var hasOwn = Object.prototype.hasOwnProperty;
        var supportsSymbol = typeof Symbol === "function";
        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
        var supportsCreate = typeof Object.create === "function";
        var supportsProto = { __proto__: [] } instanceof Array;
        var downLevel = !supportsCreate && !supportsProto;
        var HashMap = {
          // create an object in dictionary mode (a.k.a. "slow" mode in v8)
          create: supportsCreate ? function() {
            return MakeDictionary(/* @__PURE__ */ Object.create(null));
          } : supportsProto ? function() {
            return MakeDictionary({ __proto__: null });
          } : function() {
            return MakeDictionary({});
          },
          has: downLevel ? function(map, key) {
            return hasOwn.call(map, key);
          } : function(map, key) {
            return key in map;
          },
          get: downLevel ? function(map, key) {
            return hasOwn.call(map, key) ? map[key] : void 0;
          } : function(map, key) {
            return map[key];
          }
        };
        var functionPrototype = Object.getPrototypeOf(Function);
        var _Map = typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
        var _Set = typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
        var _WeakMap = typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
        var registrySymbol = supportsSymbol ? Symbol.for("@reflect-metadata:registry") : void 0;
        var metadataRegistry = GetOrCreateMetadataRegistry();
        var metadataProvider = CreateMetadataProvider(metadataRegistry);
        function decorate(decorators, target, propertyKey, attributes) {
          if (!IsUndefined(propertyKey)) {
            if (!IsArray(decorators))
              throw new TypeError();
            if (!IsObject(target))
              throw new TypeError();
            if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
              throw new TypeError();
            if (IsNull(attributes))
              attributes = void 0;
            propertyKey = ToPropertyKey(propertyKey);
            return DecorateProperty(decorators, target, propertyKey, attributes);
          } else {
            if (!IsArray(decorators))
              throw new TypeError();
            if (!IsConstructor(target))
              throw new TypeError();
            return DecorateConstructor(decorators, target);
          }
        }
        exporter("decorate", decorate);
        function metadata(metadataKey, metadataValue) {
          function decorator(target, propertyKey) {
            if (!IsObject(target))
              throw new TypeError();
            if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
              throw new TypeError();
            OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
          }
          return decorator;
        }
        exporter("metadata", metadata);
        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
          return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
        }
        exporter("defineMetadata", defineMetadata);
        function hasMetadata(metadataKey, target, propertyKey) {
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
          return OrdinaryHasMetadata(metadataKey, target, propertyKey);
        }
        exporter("hasMetadata", hasMetadata);
        function hasOwnMetadata(metadataKey, target, propertyKey) {
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
          return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
        }
        exporter("hasOwnMetadata", hasOwnMetadata);
        function getMetadata(metadataKey, target, propertyKey) {
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
          return OrdinaryGetMetadata(metadataKey, target, propertyKey);
        }
        exporter("getMetadata", getMetadata);
        function getOwnMetadata(metadataKey, target, propertyKey) {
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
          return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
        }
        exporter("getOwnMetadata", getOwnMetadata);
        function getMetadataKeys(target, propertyKey) {
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
          return OrdinaryMetadataKeys(target, propertyKey);
        }
        exporter("getMetadataKeys", getMetadataKeys);
        function getOwnMetadataKeys(target, propertyKey) {
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
          return OrdinaryOwnMetadataKeys(target, propertyKey);
        }
        exporter("getOwnMetadataKeys", getOwnMetadataKeys);
        function deleteMetadata(metadataKey, target, propertyKey) {
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
          var provider = GetMetadataProvider(
            target,
            propertyKey,
            /*Create*/
            false
          );
          if (IsUndefined(provider))
            return false;
          return provider.OrdinaryDeleteMetadata(metadataKey, target, propertyKey);
        }
        exporter("deleteMetadata", deleteMetadata);
        function DecorateConstructor(decorators, target) {
          for (var i = decorators.length - 1; i >= 0; --i) {
            var decorator = decorators[i];
            var decorated = decorator(target);
            if (!IsUndefined(decorated) && !IsNull(decorated)) {
              if (!IsConstructor(decorated))
                throw new TypeError();
              target = decorated;
            }
          }
          return target;
        }
        function DecorateProperty(decorators, target, propertyKey, descriptor) {
          for (var i = decorators.length - 1; i >= 0; --i) {
            var decorator = decorators[i];
            var decorated = decorator(target, propertyKey, descriptor);
            if (!IsUndefined(decorated) && !IsNull(decorated)) {
              if (!IsObject(decorated))
                throw new TypeError();
              descriptor = decorated;
            }
          }
          return descriptor;
        }
        function OrdinaryHasMetadata(MetadataKey, O, P) {
          var hasOwn2 = OrdinaryHasOwnMetadata(MetadataKey, O, P);
          if (hasOwn2)
            return true;
          var parent = OrdinaryGetPrototypeOf(O);
          if (!IsNull(parent))
            return OrdinaryHasMetadata(MetadataKey, parent, P);
          return false;
        }
        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
          var provider = GetMetadataProvider(
            O,
            P,
            /*Create*/
            false
          );
          if (IsUndefined(provider))
            return false;
          return ToBoolean(provider.OrdinaryHasOwnMetadata(MetadataKey, O, P));
        }
        function OrdinaryGetMetadata(MetadataKey, O, P) {
          var hasOwn2 = OrdinaryHasOwnMetadata(MetadataKey, O, P);
          if (hasOwn2)
            return OrdinaryGetOwnMetadata(MetadataKey, O, P);
          var parent = OrdinaryGetPrototypeOf(O);
          if (!IsNull(parent))
            return OrdinaryGetMetadata(MetadataKey, parent, P);
          return void 0;
        }
        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
          var provider = GetMetadataProvider(
            O,
            P,
            /*Create*/
            false
          );
          if (IsUndefined(provider))
            return;
          return provider.OrdinaryGetOwnMetadata(MetadataKey, O, P);
        }
        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
          var provider = GetMetadataProvider(
            O,
            P,
            /*Create*/
            true
          );
          provider.OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P);
        }
        function OrdinaryMetadataKeys(O, P) {
          var ownKeys2 = OrdinaryOwnMetadataKeys(O, P);
          var parent = OrdinaryGetPrototypeOf(O);
          if (parent === null)
            return ownKeys2;
          var parentKeys = OrdinaryMetadataKeys(parent, P);
          if (parentKeys.length <= 0)
            return ownKeys2;
          if (ownKeys2.length <= 0)
            return parentKeys;
          var set = new _Set();
          var keys = [];
          for (var _i = 0, ownKeys_1 = ownKeys2; _i < ownKeys_1.length; _i++) {
            var key = ownKeys_1[_i];
            var hasKey = set.has(key);
            if (!hasKey) {
              set.add(key);
              keys.push(key);
            }
          }
          for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
            var key = parentKeys_1[_a];
            var hasKey = set.has(key);
            if (!hasKey) {
              set.add(key);
              keys.push(key);
            }
          }
          return keys;
        }
        function OrdinaryOwnMetadataKeys(O, P) {
          var provider = GetMetadataProvider(
            O,
            P,
            /*create*/
            false
          );
          if (!provider) {
            return [];
          }
          return provider.OrdinaryOwnMetadataKeys(O, P);
        }
        function Type(x) {
          if (x === null)
            return 1;
          switch (typeof x) {
            case "undefined":
              return 0;
            case "boolean":
              return 2;
            case "string":
              return 3;
            case "symbol":
              return 4;
            case "number":
              return 5;
            case "object":
              return x === null ? 1 : 6;
            default:
              return 6;
          }
        }
        function IsUndefined(x) {
          return x === void 0;
        }
        function IsNull(x) {
          return x === null;
        }
        function IsSymbol(x) {
          return typeof x === "symbol";
        }
        function IsObject(x) {
          return typeof x === "object" ? x !== null : typeof x === "function";
        }
        function ToPrimitive(input, PreferredType) {
          switch (Type(input)) {
            case 0:
              return input;
            case 1:
              return input;
            case 2:
              return input;
            case 3:
              return input;
            case 4:
              return input;
            case 5:
              return input;
          }
          var hint = PreferredType === 3 ? "string" : PreferredType === 5 ? "number" : "default";
          var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
          if (exoticToPrim !== void 0) {
            var result = exoticToPrim.call(input, hint);
            if (IsObject(result))
              throw new TypeError();
            return result;
          }
          return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
        }
        function OrdinaryToPrimitive(O, hint) {
          if (hint === "string") {
            var toString_1 = O.toString;
            if (IsCallable(toString_1)) {
              var result = toString_1.call(O);
              if (!IsObject(result))
                return result;
            }
            var valueOf = O.valueOf;
            if (IsCallable(valueOf)) {
              var result = valueOf.call(O);
              if (!IsObject(result))
                return result;
            }
          } else {
            var valueOf = O.valueOf;
            if (IsCallable(valueOf)) {
              var result = valueOf.call(O);
              if (!IsObject(result))
                return result;
            }
            var toString_2 = O.toString;
            if (IsCallable(toString_2)) {
              var result = toString_2.call(O);
              if (!IsObject(result))
                return result;
            }
          }
          throw new TypeError();
        }
        function ToBoolean(argument) {
          return !!argument;
        }
        function ToString(argument) {
          return "" + argument;
        }
        function ToPropertyKey(argument) {
          var key = ToPrimitive(
            argument,
            3
            /* String */
          );
          if (IsSymbol(key))
            return key;
          return ToString(key);
        }
        function IsArray(argument) {
          return Array.isArray ? Array.isArray(argument) : argument instanceof Object ? argument instanceof Array : Object.prototype.toString.call(argument) === "[object Array]";
        }
        function IsCallable(argument) {
          return typeof argument === "function";
        }
        function IsConstructor(argument) {
          return typeof argument === "function";
        }
        function IsPropertyKey(argument) {
          switch (Type(argument)) {
            case 3:
              return true;
            case 4:
              return true;
            default:
              return false;
          }
        }
        function SameValueZero(x, y) {
          return x === y || x !== x && y !== y;
        }
        function GetMethod(V, P) {
          var func = V[P];
          if (func === void 0 || func === null)
            return void 0;
          if (!IsCallable(func))
            throw new TypeError();
          return func;
        }
        function GetIterator(obj) {
          var method = GetMethod(obj, iteratorSymbol);
          if (!IsCallable(method))
            throw new TypeError();
          var iterator = method.call(obj);
          if (!IsObject(iterator))
            throw new TypeError();
          return iterator;
        }
        function IteratorValue(iterResult) {
          return iterResult.value;
        }
        function IteratorStep(iterator) {
          var result = iterator.next();
          return result.done ? false : result;
        }
        function IteratorClose(iterator) {
          var f = iterator["return"];
          if (f)
            f.call(iterator);
        }
        function OrdinaryGetPrototypeOf(O) {
          var proto = Object.getPrototypeOf(O);
          if (typeof O !== "function" || O === functionPrototype)
            return proto;
          if (proto !== functionPrototype)
            return proto;
          var prototype = O.prototype;
          var prototypeProto = prototype && Object.getPrototypeOf(prototype);
          if (prototypeProto == null || prototypeProto === Object.prototype)
            return proto;
          var constructor = prototypeProto.constructor;
          if (typeof constructor !== "function")
            return proto;
          if (constructor === O)
            return proto;
          return constructor;
        }
        function CreateMetadataRegistry() {
          var fallback;
          if (!IsUndefined(registrySymbol) && typeof root.Reflect !== "undefined" && !(registrySymbol in root.Reflect) && typeof root.Reflect.defineMetadata === "function") {
            fallback = CreateFallbackProvider(root.Reflect);
          }
          var first;
          var second;
          var rest;
          var targetProviderMap = new _WeakMap();
          var registry = {
            registerProvider,
            getProvider,
            setProvider
          };
          return registry;
          function registerProvider(provider) {
            if (!Object.isExtensible(registry)) {
              throw new Error("Cannot add provider to a frozen registry.");
            }
            switch (true) {
              case fallback === provider:
                break;
              case IsUndefined(first):
                first = provider;
                break;
              case first === provider:
                break;
              case IsUndefined(second):
                second = provider;
                break;
              case second === provider:
                break;
              default:
                if (rest === void 0)
                  rest = new _Set();
                rest.add(provider);
                break;
            }
          }
          function getProviderNoCache(O, P) {
            if (!IsUndefined(first)) {
              if (first.isProviderFor(O, P))
                return first;
              if (!IsUndefined(second)) {
                if (second.isProviderFor(O, P))
                  return first;
                if (!IsUndefined(rest)) {
                  var iterator = GetIterator(rest);
                  while (true) {
                    var next = IteratorStep(iterator);
                    if (!next) {
                      return void 0;
                    }
                    var provider = IteratorValue(next);
                    if (provider.isProviderFor(O, P)) {
                      IteratorClose(iterator);
                      return provider;
                    }
                  }
                }
              }
            }
            if (!IsUndefined(fallback) && fallback.isProviderFor(O, P)) {
              return fallback;
            }
            return void 0;
          }
          function getProvider(O, P) {
            var providerMap = targetProviderMap.get(O);
            var provider;
            if (!IsUndefined(providerMap)) {
              provider = providerMap.get(P);
            }
            if (!IsUndefined(provider)) {
              return provider;
            }
            provider = getProviderNoCache(O, P);
            if (!IsUndefined(provider)) {
              if (IsUndefined(providerMap)) {
                providerMap = new _Map();
                targetProviderMap.set(O, providerMap);
              }
              providerMap.set(P, provider);
            }
            return provider;
          }
          function hasProvider(provider) {
            if (IsUndefined(provider))
              throw new TypeError();
            return first === provider || second === provider || !IsUndefined(rest) && rest.has(provider);
          }
          function setProvider(O, P, provider) {
            if (!hasProvider(provider)) {
              throw new Error("Metadata provider not registered.");
            }
            var existingProvider = getProvider(O, P);
            if (existingProvider !== provider) {
              if (!IsUndefined(existingProvider)) {
                return false;
              }
              var providerMap = targetProviderMap.get(O);
              if (IsUndefined(providerMap)) {
                providerMap = new _Map();
                targetProviderMap.set(O, providerMap);
              }
              providerMap.set(P, provider);
            }
            return true;
          }
        }
        function GetOrCreateMetadataRegistry() {
          var metadataRegistry2;
          if (!IsUndefined(registrySymbol) && IsObject(root.Reflect) && Object.isExtensible(root.Reflect)) {
            metadataRegistry2 = root.Reflect[registrySymbol];
          }
          if (IsUndefined(metadataRegistry2)) {
            metadataRegistry2 = CreateMetadataRegistry();
          }
          if (!IsUndefined(registrySymbol) && IsObject(root.Reflect) && Object.isExtensible(root.Reflect)) {
            Object.defineProperty(root.Reflect, registrySymbol, {
              enumerable: false,
              configurable: false,
              writable: false,
              value: metadataRegistry2
            });
          }
          return metadataRegistry2;
        }
        function CreateMetadataProvider(registry) {
          var metadata2 = new _WeakMap();
          var provider = {
            isProviderFor: function(O, P) {
              var targetMetadata = metadata2.get(O);
              if (IsUndefined(targetMetadata))
                return false;
              return targetMetadata.has(P);
            },
            OrdinaryDefineOwnMetadata: OrdinaryDefineOwnMetadata2,
            OrdinaryHasOwnMetadata: OrdinaryHasOwnMetadata2,
            OrdinaryGetOwnMetadata: OrdinaryGetOwnMetadata2,
            OrdinaryOwnMetadataKeys: OrdinaryOwnMetadataKeys2,
            OrdinaryDeleteMetadata
          };
          metadataRegistry.registerProvider(provider);
          return provider;
          function GetOrCreateMetadataMap(O, P, Create) {
            var targetMetadata = metadata2.get(O);
            var createdTargetMetadata = false;
            if (IsUndefined(targetMetadata)) {
              if (!Create)
                return void 0;
              targetMetadata = new _Map();
              metadata2.set(O, targetMetadata);
              createdTargetMetadata = true;
            }
            var metadataMap = targetMetadata.get(P);
            if (IsUndefined(metadataMap)) {
              if (!Create)
                return void 0;
              metadataMap = new _Map();
              targetMetadata.set(P, metadataMap);
              if (!registry.setProvider(O, P, provider)) {
                targetMetadata.delete(P);
                if (createdTargetMetadata) {
                  metadata2.delete(O);
                }
                throw new Error("Wrong provider for target.");
              }
            }
            return metadataMap;
          }
          function OrdinaryHasOwnMetadata2(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(
              O,
              P,
              /*Create*/
              false
            );
            if (IsUndefined(metadataMap))
              return false;
            return ToBoolean(metadataMap.has(MetadataKey));
          }
          function OrdinaryGetOwnMetadata2(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(
              O,
              P,
              /*Create*/
              false
            );
            if (IsUndefined(metadataMap))
              return void 0;
            return metadataMap.get(MetadataKey);
          }
          function OrdinaryDefineOwnMetadata2(MetadataKey, MetadataValue, O, P) {
            var metadataMap = GetOrCreateMetadataMap(
              O,
              P,
              /*Create*/
              true
            );
            metadataMap.set(MetadataKey, MetadataValue);
          }
          function OrdinaryOwnMetadataKeys2(O, P) {
            var keys = [];
            var metadataMap = GetOrCreateMetadataMap(
              O,
              P,
              /*Create*/
              false
            );
            if (IsUndefined(metadataMap))
              return keys;
            var keysObj = metadataMap.keys();
            var iterator = GetIterator(keysObj);
            var k = 0;
            while (true) {
              var next = IteratorStep(iterator);
              if (!next) {
                keys.length = k;
                return keys;
              }
              var nextValue = IteratorValue(next);
              try {
                keys[k] = nextValue;
              } catch (e) {
                try {
                  IteratorClose(iterator);
                } finally {
                  throw e;
                }
              }
              k++;
            }
          }
          function OrdinaryDeleteMetadata(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(
              O,
              P,
              /*Create*/
              false
            );
            if (IsUndefined(metadataMap))
              return false;
            if (!metadataMap.delete(MetadataKey))
              return false;
            if (metadataMap.size === 0) {
              var targetMetadata = metadata2.get(O);
              if (!IsUndefined(targetMetadata)) {
                targetMetadata.delete(P);
                if (targetMetadata.size === 0) {
                  metadata2.delete(targetMetadata);
                }
              }
            }
            return true;
          }
        }
        function CreateFallbackProvider(reflect) {
          var defineMetadata2 = reflect.defineMetadata, hasOwnMetadata2 = reflect.hasOwnMetadata, getOwnMetadata2 = reflect.getOwnMetadata, getOwnMetadataKeys2 = reflect.getOwnMetadataKeys, deleteMetadata2 = reflect.deleteMetadata;
          var metadataOwner = new _WeakMap();
          var provider = {
            isProviderFor: function(O, P) {
              var metadataPropertySet = metadataOwner.get(O);
              if (!IsUndefined(metadataPropertySet) && metadataPropertySet.has(P)) {
                return true;
              }
              if (getOwnMetadataKeys2(O, P).length) {
                if (IsUndefined(metadataPropertySet)) {
                  metadataPropertySet = new _Set();
                  metadataOwner.set(O, metadataPropertySet);
                }
                metadataPropertySet.add(P);
                return true;
              }
              return false;
            },
            OrdinaryDefineOwnMetadata: defineMetadata2,
            OrdinaryHasOwnMetadata: hasOwnMetadata2,
            OrdinaryGetOwnMetadata: getOwnMetadata2,
            OrdinaryOwnMetadataKeys: getOwnMetadataKeys2,
            OrdinaryDeleteMetadata: deleteMetadata2
          };
          return provider;
        }
        function GetMetadataProvider(O, P, Create) {
          var registeredProvider = metadataRegistry.getProvider(O, P);
          if (!IsUndefined(registeredProvider)) {
            return registeredProvider;
          }
          if (Create) {
            if (metadataRegistry.setProvider(O, P, metadataProvider)) {
              return metadataProvider;
            }
            throw new Error("Illegal state.");
          }
          return void 0;
        }
        function CreateMapPolyfill() {
          var cacheSentinel = {};
          var arraySentinel = [];
          var MapIterator = (
            /** @class */
            function() {
              function MapIterator2(keys, values, selector) {
                this._index = 0;
                this._keys = keys;
                this._values = values;
                this._selector = selector;
              }
              MapIterator2.prototype["@@iterator"] = function() {
                return this;
              };
              MapIterator2.prototype[iteratorSymbol] = function() {
                return this;
              };
              MapIterator2.prototype.next = function() {
                var index = this._index;
                if (index >= 0 && index < this._keys.length) {
                  var result = this._selector(this._keys[index], this._values[index]);
                  if (index + 1 >= this._keys.length) {
                    this._index = -1;
                    this._keys = arraySentinel;
                    this._values = arraySentinel;
                  } else {
                    this._index++;
                  }
                  return { value: result, done: false };
                }
                return { value: void 0, done: true };
              };
              MapIterator2.prototype.throw = function(error) {
                if (this._index >= 0) {
                  this._index = -1;
                  this._keys = arraySentinel;
                  this._values = arraySentinel;
                }
                throw error;
              };
              MapIterator2.prototype.return = function(value) {
                if (this._index >= 0) {
                  this._index = -1;
                  this._keys = arraySentinel;
                  this._values = arraySentinel;
                }
                return { value, done: true };
              };
              return MapIterator2;
            }()
          );
          var Map2 = (
            /** @class */
            function() {
              function Map3() {
                this._keys = [];
                this._values = [];
                this._cacheKey = cacheSentinel;
                this._cacheIndex = -2;
              }
              Object.defineProperty(Map3.prototype, "size", {
                get: function() {
                  return this._keys.length;
                },
                enumerable: true,
                configurable: true
              });
              Map3.prototype.has = function(key) {
                return this._find(
                  key,
                  /*insert*/
                  false
                ) >= 0;
              };
              Map3.prototype.get = function(key) {
                var index = this._find(
                  key,
                  /*insert*/
                  false
                );
                return index >= 0 ? this._values[index] : void 0;
              };
              Map3.prototype.set = function(key, value) {
                var index = this._find(
                  key,
                  /*insert*/
                  true
                );
                this._values[index] = value;
                return this;
              };
              Map3.prototype.delete = function(key) {
                var index = this._find(
                  key,
                  /*insert*/
                  false
                );
                if (index >= 0) {
                  var size = this._keys.length;
                  for (var i = index + 1; i < size; i++) {
                    this._keys[i - 1] = this._keys[i];
                    this._values[i - 1] = this._values[i];
                  }
                  this._keys.length--;
                  this._values.length--;
                  if (SameValueZero(key, this._cacheKey)) {
                    this._cacheKey = cacheSentinel;
                    this._cacheIndex = -2;
                  }
                  return true;
                }
                return false;
              };
              Map3.prototype.clear = function() {
                this._keys.length = 0;
                this._values.length = 0;
                this._cacheKey = cacheSentinel;
                this._cacheIndex = -2;
              };
              Map3.prototype.keys = function() {
                return new MapIterator(this._keys, this._values, getKey);
              };
              Map3.prototype.values = function() {
                return new MapIterator(this._keys, this._values, getValue);
              };
              Map3.prototype.entries = function() {
                return new MapIterator(this._keys, this._values, getEntry);
              };
              Map3.prototype["@@iterator"] = function() {
                return this.entries();
              };
              Map3.prototype[iteratorSymbol] = function() {
                return this.entries();
              };
              Map3.prototype._find = function(key, insert) {
                if (!SameValueZero(this._cacheKey, key)) {
                  this._cacheIndex = -1;
                  for (var i = 0; i < this._keys.length; i++) {
                    if (SameValueZero(this._keys[i], key)) {
                      this._cacheIndex = i;
                      break;
                    }
                  }
                }
                if (this._cacheIndex < 0 && insert) {
                  this._cacheIndex = this._keys.length;
                  this._keys.push(key);
                  this._values.push(void 0);
                }
                return this._cacheIndex;
              };
              return Map3;
            }()
          );
          return Map2;
          function getKey(key, _) {
            return key;
          }
          function getValue(_, value) {
            return value;
          }
          function getEntry(key, value) {
            return [key, value];
          }
        }
        function CreateSetPolyfill() {
          var Set2 = (
            /** @class */
            function() {
              function Set3() {
                this._map = new _Map();
              }
              Object.defineProperty(Set3.prototype, "size", {
                get: function() {
                  return this._map.size;
                },
                enumerable: true,
                configurable: true
              });
              Set3.prototype.has = function(value) {
                return this._map.has(value);
              };
              Set3.prototype.add = function(value) {
                return this._map.set(value, value), this;
              };
              Set3.prototype.delete = function(value) {
                return this._map.delete(value);
              };
              Set3.prototype.clear = function() {
                this._map.clear();
              };
              Set3.prototype.keys = function() {
                return this._map.keys();
              };
              Set3.prototype.values = function() {
                return this._map.keys();
              };
              Set3.prototype.entries = function() {
                return this._map.entries();
              };
              Set3.prototype["@@iterator"] = function() {
                return this.keys();
              };
              Set3.prototype[iteratorSymbol] = function() {
                return this.keys();
              };
              return Set3;
            }()
          );
          return Set2;
        }
        function CreateWeakMapPolyfill() {
          var UUID_SIZE = 16;
          var keys = HashMap.create();
          var rootKey = CreateUniqueKey();
          return (
            /** @class */
            function() {
              function WeakMap2() {
                this._key = CreateUniqueKey();
              }
              WeakMap2.prototype.has = function(target) {
                var table = GetOrCreateWeakMapTable(
                  target,
                  /*create*/
                  false
                );
                return table !== void 0 ? HashMap.has(table, this._key) : false;
              };
              WeakMap2.prototype.get = function(target) {
                var table = GetOrCreateWeakMapTable(
                  target,
                  /*create*/
                  false
                );
                return table !== void 0 ? HashMap.get(table, this._key) : void 0;
              };
              WeakMap2.prototype.set = function(target, value) {
                var table = GetOrCreateWeakMapTable(
                  target,
                  /*create*/
                  true
                );
                table[this._key] = value;
                return this;
              };
              WeakMap2.prototype.delete = function(target) {
                var table = GetOrCreateWeakMapTable(
                  target,
                  /*create*/
                  false
                );
                return table !== void 0 ? delete table[this._key] : false;
              };
              WeakMap2.prototype.clear = function() {
                this._key = CreateUniqueKey();
              };
              return WeakMap2;
            }()
          );
          function CreateUniqueKey() {
            var key;
            do
              key = "@@WeakMap@@" + CreateUUID();
            while (HashMap.has(keys, key));
            keys[key] = true;
            return key;
          }
          function GetOrCreateWeakMapTable(target, create) {
            if (!hasOwn.call(target, rootKey)) {
              if (!create)
                return void 0;
              Object.defineProperty(target, rootKey, { value: HashMap.create() });
            }
            return target[rootKey];
          }
          function FillRandomBytes(buffer, size) {
            for (var i = 0; i < size; ++i)
              buffer[i] = Math.random() * 255 | 0;
            return buffer;
          }
          function GenRandomBytes(size) {
            if (typeof Uint8Array === "function") {
              var array = new Uint8Array(size);
              if (typeof crypto !== "undefined") {
                crypto.getRandomValues(array);
              } else if (typeof msCrypto !== "undefined") {
                msCrypto.getRandomValues(array);
              } else {
                FillRandomBytes(array, size);
              }
              return array;
            }
            return FillRandomBytes(new Array(size), size);
          }
          function CreateUUID() {
            var data = GenRandomBytes(UUID_SIZE);
            data[6] = data[6] & 79 | 64;
            data[8] = data[8] & 191 | 128;
            var result = "";
            for (var offset = 0; offset < UUID_SIZE; ++offset) {
              var byte = data[offset];
              if (offset === 4 || offset === 6 || offset === 8)
                result += "-";
              if (byte < 16)
                result += "0";
              result += byte.toString(16).toLowerCase();
            }
            return result;
          }
        }
        function MakeDictionary(obj) {
          obj.__ = void 0;
          delete obj.__;
          return obj;
        }
      });
    })(Reflect2 || (Reflect2 = {}));
  }
});

// ../../../node_modules/@inversifyjs/common/lib/cjs/services/calculations/stringifyServiceIdentifier.js
var require_stringifyServiceIdentifier = __commonJS({
  "../../../node_modules/@inversifyjs/common/lib/cjs/services/calculations/stringifyServiceIdentifier.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringifyServiceIdentifier = stringifyServiceIdentifier;
    function stringifyServiceIdentifier(serviceIdentifier) {
      switch (typeof serviceIdentifier) {
        case "string":
        case "symbol":
          return serviceIdentifier.toString();
        case "function":
          return serviceIdentifier.name;
        default:
          throw new Error(`Unexpected ${typeof serviceIdentifier} service id type`);
      }
    }
  }
});

// ../../../node_modules/@inversifyjs/common/lib/cjs/services/models/LazyServiceIdentifier.js
var require_LazyServiceIdentifier = __commonJS({
  "../../../node_modules/@inversifyjs/common/lib/cjs/services/models/LazyServiceIdentifier.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LazyServiceIdentifier = exports.islazyServiceIdentifierSymbol = void 0;
    exports.islazyServiceIdentifierSymbol = Symbol.for("@inversifyjs/common/islazyServiceIdentifier");
    var _a, _buildServiceId;
    _a = exports.islazyServiceIdentifierSymbol;
    var LazyServiceIdentifier = class {
      constructor(buildServiceId) {
        __publicField(this, _a);
        __privateAdd(this, _buildServiceId);
        __privateSet(this, _buildServiceId, buildServiceId);
        this[exports.islazyServiceIdentifierSymbol] = true;
      }
      static is(value) {
        return typeof value === "object" && value !== null && value[exports.islazyServiceIdentifierSymbol] === true;
      }
      unwrap() {
        return __privateGet(this, _buildServiceId).call(this);
      }
    };
    _buildServiceId = new WeakMap();
    exports.LazyServiceIdentifier = LazyServiceIdentifier;
  }
});

// ../../../node_modules/@inversifyjs/common/lib/cjs/index.js
var require_cjs = __commonJS({
  "../../../node_modules/@inversifyjs/common/lib/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringifyServiceIdentifier = exports.LazyServiceIdentifier = void 0;
    var stringifyServiceIdentifier_1 = require_stringifyServiceIdentifier();
    Object.defineProperty(exports, "stringifyServiceIdentifier", { enumerable: true, get: function() {
      return stringifyServiceIdentifier_1.stringifyServiceIdentifier;
    } });
    var LazyServiceIdentifier_1 = require_LazyServiceIdentifier();
    Object.defineProperty(exports, "LazyServiceIdentifier", { enumerable: true, get: function() {
      return LazyServiceIdentifier_1.LazyServiceIdentifier;
    } });
  }
});

// ../../../node_modules/inversify/lib/cjs/constants/metadata_keys.js
var require_metadata_keys = __commonJS({
  "../../../node_modules/inversify/lib/cjs/constants/metadata_keys.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NON_CUSTOM_TAG_KEYS = exports.PRE_DESTROY = exports.POST_CONSTRUCT = exports.DESIGN_PARAM_TYPES = exports.PARAM_TYPES = exports.TAGGED_PROP = exports.TAGGED = exports.MULTI_INJECT_TAG = exports.INJECT_TAG = exports.OPTIONAL_TAG = exports.UNMANAGED_TAG = exports.NAME_TAG = exports.NAMED_TAG = void 0;
    exports.NAMED_TAG = "named";
    exports.NAME_TAG = "name";
    exports.UNMANAGED_TAG = "unmanaged";
    exports.OPTIONAL_TAG = "optional";
    exports.INJECT_TAG = "inject";
    exports.MULTI_INJECT_TAG = "multi_inject";
    exports.TAGGED = "inversify:tagged";
    exports.TAGGED_PROP = "inversify:tagged_props";
    exports.PARAM_TYPES = "inversify:paramtypes";
    exports.DESIGN_PARAM_TYPES = "design:paramtypes";
    exports.POST_CONSTRUCT = "post_construct";
    exports.PRE_DESTROY = "pre_destroy";
    function getNonCustomTagKeys() {
      return [
        exports.INJECT_TAG,
        exports.MULTI_INJECT_TAG,
        exports.NAME_TAG,
        exports.UNMANAGED_TAG,
        exports.NAMED_TAG,
        exports.OPTIONAL_TAG
      ];
    }
    exports.NON_CUSTOM_TAG_KEYS = getNonCustomTagKeys();
  }
});

// ../../../node_modules/inversify/lib/cjs/constants/literal_types.js
var require_literal_types = __commonJS({
  "../../../node_modules/inversify/lib/cjs/constants/literal_types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TargetTypeEnum = exports.BindingTypeEnum = exports.BindingScopeEnum = void 0;
    var BindingScopeEnum = {
      Request: "Request",
      Singleton: "Singleton",
      Transient: "Transient"
    };
    exports.BindingScopeEnum = BindingScopeEnum;
    var BindingTypeEnum = {
      ConstantValue: "ConstantValue",
      Constructor: "Constructor",
      DynamicValue: "DynamicValue",
      Factory: "Factory",
      Function: "Function",
      Instance: "Instance",
      Invalid: "Invalid",
      Provider: "Provider"
    };
    exports.BindingTypeEnum = BindingTypeEnum;
    var TargetTypeEnum = {
      ClassProperty: "ClassProperty",
      ConstructorArgument: "ConstructorArgument",
      Variable: "Variable"
    };
    exports.TargetTypeEnum = TargetTypeEnum;
  }
});

// ../../../node_modules/inversify/lib/cjs/utils/id.js
var require_id = __commonJS({
  "../../../node_modules/inversify/lib/cjs/utils/id.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.id = id;
    var idCounter = 0;
    function id() {
      return idCounter++;
    }
  }
});

// ../../../node_modules/inversify/lib/cjs/bindings/binding.js
var require_binding = __commonJS({
  "../../../node_modules/inversify/lib/cjs/bindings/binding.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Binding = void 0;
    var literal_types_1 = require_literal_types();
    var id_1 = require_id();
    var Binding = class _Binding {
      constructor(serviceIdentifier, scope) {
        __publicField(this, "id");
        __publicField(this, "moduleId");
        // Determines weather the bindings has been already activated
        // The activation action takes place when an instance is resolved
        // If the scope is singleton it only happens once
        __publicField(this, "activated");
        // A runtime identifier because at runtime we don't have interfaces
        __publicField(this, "serviceIdentifier");
        // constructor from binding to or toConstructor
        __publicField(this, "implementationType");
        // Cache used to allow singleton scope and BindingType.ConstantValue bindings
        __publicField(this, "cache");
        // Cache used to allow BindingType.DynamicValue bindings
        __publicField(this, "dynamicValue");
        // The scope mode to be used
        __publicField(this, "scope");
        // The kind of binding
        __publicField(this, "type");
        // A factory method used in BindingType.Factory bindings
        __publicField(this, "factory");
        // An async factory method used in BindingType.Provider bindings
        __publicField(this, "provider");
        // A constraint used to limit the contexts in which this binding is applicable
        __publicField(this, "constraint");
        // On activation handler (invoked just before an instance is added to cache and injected)
        __publicField(this, "onActivation");
        // On deactivation handler (invoked just before an instance is unbinded and removed from container)
        __publicField(this, "onDeactivation");
        this.id = (0, id_1.id)();
        this.activated = false;
        this.serviceIdentifier = serviceIdentifier;
        this.scope = scope;
        this.type = literal_types_1.BindingTypeEnum.Invalid;
        this.constraint = (_request) => true;
        this.implementationType = null;
        this.cache = null;
        this.factory = null;
        this.provider = null;
        this.onActivation = null;
        this.onDeactivation = null;
        this.dynamicValue = null;
      }
      clone() {
        const clone = new _Binding(this.serviceIdentifier, this.scope);
        clone.activated = clone.scope === literal_types_1.BindingScopeEnum.Singleton ? this.activated : false;
        clone.implementationType = this.implementationType;
        clone.dynamicValue = this.dynamicValue;
        clone.scope = this.scope;
        clone.type = this.type;
        clone.factory = this.factory;
        clone.provider = this.provider;
        clone.constraint = this.constraint;
        clone.onActivation = this.onActivation;
        clone.onDeactivation = this.onDeactivation;
        clone.cache = this.cache;
        return clone;
      }
    };
    exports.Binding = Binding;
  }
});

// ../../../node_modules/inversify/lib/cjs/constants/error_msgs.js
var require_error_msgs = __commonJS({
  "../../../node_modules/inversify/lib/cjs/constants/error_msgs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STACK_OVERFLOW = exports.CIRCULAR_DEPENDENCY_IN_FACTORY = exports.ON_DEACTIVATION_ERROR = exports.PRE_DESTROY_ERROR = exports.POST_CONSTRUCT_ERROR = exports.ASYNC_UNBIND_REQUIRED = exports.MULTIPLE_POST_CONSTRUCT_METHODS = exports.MULTIPLE_PRE_DESTROY_METHODS = exports.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK = exports.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE = exports.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE = exports.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT = exports.ARGUMENTS_LENGTH_MISMATCH = exports.INVALID_DECORATOR_OPERATION = exports.INVALID_TO_SELF_VALUE = exports.LAZY_IN_SYNC = exports.INVALID_FUNCTION_BINDING = exports.INVALID_MIDDLEWARE_RETURN = exports.NO_MORE_SNAPSHOTS_AVAILABLE = exports.INVALID_BINDING_TYPE = exports.CIRCULAR_DEPENDENCY = exports.UNDEFINED_INJECT_ANNOTATION = exports.TRYING_TO_RESOLVE_BINDINGS = exports.NOT_REGISTERED = exports.CANNOT_UNBIND = exports.AMBIGUOUS_MATCH = exports.KEY_NOT_FOUND = exports.NULL_ARGUMENT = exports.DUPLICATED_METADATA = exports.DUPLICATED_INJECTABLE_DECORATOR = void 0;
    exports.DUPLICATED_INJECTABLE_DECORATOR = "Cannot apply @injectable decorator multiple times.";
    exports.DUPLICATED_METADATA = "Metadata key was used more than once in a parameter:";
    exports.NULL_ARGUMENT = "NULL argument";
    exports.KEY_NOT_FOUND = "Key Not Found";
    exports.AMBIGUOUS_MATCH = "Ambiguous match found for serviceIdentifier:";
    exports.CANNOT_UNBIND = "Could not unbind serviceIdentifier:";
    exports.NOT_REGISTERED = "No matching bindings found for serviceIdentifier:";
    var TRYING_TO_RESOLVE_BINDINGS = (name) => `Trying to resolve bindings for "${name}"`;
    exports.TRYING_TO_RESOLVE_BINDINGS = TRYING_TO_RESOLVE_BINDINGS;
    var UNDEFINED_INJECT_ANNOTATION = (name) => `@inject called with undefined this could mean that the class ${name} has a circular dependency problem. You can use a LazyServiceIdentifer to overcome this limitation.`;
    exports.UNDEFINED_INJECT_ANNOTATION = UNDEFINED_INJECT_ANNOTATION;
    exports.CIRCULAR_DEPENDENCY = "Circular dependency found:";
    exports.INVALID_BINDING_TYPE = "Invalid binding type:";
    exports.NO_MORE_SNAPSHOTS_AVAILABLE = "No snapshot available to restore.";
    exports.INVALID_MIDDLEWARE_RETURN = "Invalid return type in middleware. Middleware must return!";
    exports.INVALID_FUNCTION_BINDING = "Value provided to function binding must be a function!";
    var LAZY_IN_SYNC = (key) => `You are attempting to construct ${keyToString(key)} in a synchronous way but it has asynchronous dependencies.`;
    exports.LAZY_IN_SYNC = LAZY_IN_SYNC;
    exports.INVALID_TO_SELF_VALUE = "The toSelf function can only be applied when a constructor is used as service identifier";
    exports.INVALID_DECORATOR_OPERATION = "The @inject @multiInject @tagged and @named decorators must be applied to the parameters of a class constructor or a class property.";
    var ARGUMENTS_LENGTH_MISMATCH = (name) => `The number of constructor arguments in the derived class ${name} must be >= than the number of constructor arguments of its base class.`;
    exports.ARGUMENTS_LENGTH_MISMATCH = ARGUMENTS_LENGTH_MISMATCH;
    exports.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT = "Invalid Container constructor argument. Container options must be an object.";
    exports.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE = 'Invalid Container option. Default scope must be a string ("singleton" or "transient").';
    exports.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE = "Invalid Container option. Auto bind injectable must be a boolean";
    exports.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK = "Invalid Container option. Skip base check must be a boolean";
    exports.MULTIPLE_PRE_DESTROY_METHODS = "Cannot apply @preDestroy decorator multiple times in the same class";
    exports.MULTIPLE_POST_CONSTRUCT_METHODS = "Cannot apply @postConstruct decorator multiple times in the same class";
    exports.ASYNC_UNBIND_REQUIRED = "Attempting to unbind dependency with asynchronous destruction (@preDestroy or onDeactivation)";
    var POST_CONSTRUCT_ERROR = (clazz, errorMessage) => `@postConstruct error in class ${clazz}: ${errorMessage}`;
    exports.POST_CONSTRUCT_ERROR = POST_CONSTRUCT_ERROR;
    var PRE_DESTROY_ERROR = (clazz, errorMessage) => `@preDestroy error in class ${clazz}: ${errorMessage}`;
    exports.PRE_DESTROY_ERROR = PRE_DESTROY_ERROR;
    var ON_DEACTIVATION_ERROR = (clazz, errorMessage) => `onDeactivation() error in class ${clazz}: ${errorMessage}`;
    exports.ON_DEACTIVATION_ERROR = ON_DEACTIVATION_ERROR;
    var CIRCULAR_DEPENDENCY_IN_FACTORY = (factoryType, serviceIdentifier) => `It looks like there is a circular dependency in one of the '${factoryType}' bindings. Please investigate bindings with service identifier '${serviceIdentifier}'.`;
    exports.CIRCULAR_DEPENDENCY_IN_FACTORY = CIRCULAR_DEPENDENCY_IN_FACTORY;
    exports.STACK_OVERFLOW = "Maximum call stack size exceeded";
    function keyToString(key) {
      if (typeof key === "function") {
        return `[function/class ${key.name || "<anonymous>"}]`;
      }
      if (typeof key === "symbol") {
        return key.toString();
      }
      return `'${key}'`;
    }
  }
});

// ../../../node_modules/inversify/lib/cjs/planning/metadata_reader.js
var require_metadata_reader = __commonJS({
  "../../../node_modules/inversify/lib/cjs/planning/metadata_reader.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MetadataReader = void 0;
    var METADATA_KEY = __importStar2(require_metadata_keys());
    var MetadataReader = class {
      getConstructorMetadata(constructorFunc) {
        const compilerGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.DESIGN_PARAM_TYPES, constructorFunc) ?? [];
        const userGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.TAGGED, constructorFunc);
        return {
          compilerGeneratedMetadata,
          userGeneratedMetadata: userGeneratedMetadata ?? {}
        };
      }
      getPropertiesMetadata(constructorFunc) {
        const userGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.TAGGED_PROP, constructorFunc) ?? {};
        return userGeneratedMetadata;
      }
    };
    exports.MetadataReader = MetadataReader;
  }
});

// ../../../node_modules/@inversifyjs/reflect-metadata-utils/lib/cjs/reflectMetadata/utils/getReflectMetadata.js
var require_getReflectMetadata = __commonJS({
  "../../../node_modules/@inversifyjs/reflect-metadata-utils/lib/cjs/reflectMetadata/utils/getReflectMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getReflectMetadata = getReflectMetadata;
    function getReflectMetadata(target, metadataKey) {
      return Reflect.getMetadata(metadataKey, target);
    }
  }
});

// ../../../node_modules/@inversifyjs/reflect-metadata-utils/lib/cjs/reflectMetadata/utils/updateReflectMetadata.js
var require_updateReflectMetadata = __commonJS({
  "../../../node_modules/@inversifyjs/reflect-metadata-utils/lib/cjs/reflectMetadata/utils/updateReflectMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateReflectMetadata = updateReflectMetadata;
    var getReflectMetadata_1 = require_getReflectMetadata();
    function updateReflectMetadata(target, metadataKey, defaultValue, callback) {
      const metadata = (0, getReflectMetadata_1.getReflectMetadata)(target, metadataKey) ?? defaultValue;
      const updatedMetadata = callback(metadata);
      Reflect.defineMetadata(metadataKey, updatedMetadata, target);
    }
  }
});

// ../../../node_modules/@inversifyjs/reflect-metadata-utils/lib/cjs/index.js
var require_cjs2 = __commonJS({
  "../../../node_modules/@inversifyjs/reflect-metadata-utils/lib/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateReflectMetadata = exports.getReflectMetadata = void 0;
    var getReflectMetadata_1 = require_getReflectMetadata();
    Object.defineProperty(exports, "getReflectMetadata", { enumerable: true, get: function() {
      return getReflectMetadata_1.getReflectMetadata;
    } });
    var updateReflectMetadata_1 = require_updateReflectMetadata();
    Object.defineProperty(exports, "updateReflectMetadata", { enumerable: true, get: function() {
      return updateReflectMetadata_1.updateReflectMetadata;
    } });
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/reflectMetadata/data/keys.js
var require_keys = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/reflectMetadata/data/keys.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NON_CUSTOM_TAG_KEYS = exports.PRE_DESTROY = exports.POST_CONSTRUCT = exports.DESIGN_PARAM_TYPES = exports.PARAM_TYPES = exports.TAGGED_PROP = exports.TAGGED = exports.MULTI_INJECT_TAG = exports.INJECT_TAG = exports.OPTIONAL_TAG = exports.UNMANAGED_TAG = exports.NAME_TAG = exports.NAMED_TAG = void 0;
    exports.NAMED_TAG = "named";
    exports.NAME_TAG = "name";
    exports.UNMANAGED_TAG = "unmanaged";
    exports.OPTIONAL_TAG = "optional";
    exports.INJECT_TAG = "inject";
    exports.MULTI_INJECT_TAG = "multi_inject";
    exports.TAGGED = "inversify:tagged";
    exports.TAGGED_PROP = "inversify:tagged_props";
    exports.PARAM_TYPES = "inversify:paramtypes";
    exports.DESIGN_PARAM_TYPES = "design:paramtypes";
    exports.POST_CONSTRUCT = "post_construct";
    exports.PRE_DESTROY = "pre_destroy";
    function getNonCustomTagKeys() {
      return [
        exports.INJECT_TAG,
        exports.MULTI_INJECT_TAG,
        exports.NAME_TAG,
        exports.UNMANAGED_TAG,
        exports.NAMED_TAG,
        exports.OPTIONAL_TAG
      ];
    }
    exports.NON_CUSTOM_TAG_KEYS = getNonCustomTagKeys();
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/error/models/InversifyCoreError.js
var require_InversifyCoreError = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/error/models/InversifyCoreError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InversifyCoreError = exports.isAppErrorSymbol = void 0;
    exports.isAppErrorSymbol = Symbol.for("@inversifyjs/core/InversifyCoreError");
    var _a, _b;
    var InversifyCoreError = class _InversifyCoreError extends (_b = Error, _a = exports.isAppErrorSymbol, _b) {
      constructor(kind, message, options) {
        super(message, options);
        __publicField(this, _a);
        __publicField(this, "kind");
        this[exports.isAppErrorSymbol] = true;
        this.kind = kind;
      }
      static is(value) {
        return typeof value === "object" && value !== null && value[exports.isAppErrorSymbol] === true;
      }
      static isErrorOfKind(value, kind) {
        return _InversifyCoreError.is(value) && value.kind === kind;
      }
    };
    exports.InversifyCoreError = InversifyCoreError;
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/error/models/InversifyCoreErrorKind.js
var require_InversifyCoreErrorKind = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/error/models/InversifyCoreErrorKind.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InversifyCoreErrorKind = void 0;
    var InversifyCoreErrorKind;
    (function(InversifyCoreErrorKind2) {
      InversifyCoreErrorKind2[InversifyCoreErrorKind2["injectionDecoratorConflict"] = 0] = "injectionDecoratorConflict";
      InversifyCoreErrorKind2[InversifyCoreErrorKind2["missingInjectionDecorator"] = 1] = "missingInjectionDecorator";
      InversifyCoreErrorKind2[InversifyCoreErrorKind2["planning"] = 2] = "planning";
      InversifyCoreErrorKind2[InversifyCoreErrorKind2["unknown"] = 3] = "unknown";
    })(InversifyCoreErrorKind || (exports.InversifyCoreErrorKind = InversifyCoreErrorKind = {}));
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/assertConstructorMetadataArrayFilled.js
var require_assertConstructorMetadataArrayFilled = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/assertConstructorMetadataArrayFilled.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.assertConstructorMetadataArrayFilled = assertConstructorMetadataArrayFilled;
    var InversifyCoreError_1 = require_InversifyCoreError();
    var InversifyCoreErrorKind_1 = require_InversifyCoreErrorKind();
    function assertConstructorMetadataArrayFilled(type, value) {
      const undefinedIndexes = [];
      for (let i = 0; i < value.length; ++i) {
        const element = value[i];
        if (element === void 0) {
          undefinedIndexes.push(i);
        }
      }
      if (undefinedIndexes.length > 0) {
        throw new InversifyCoreError_1.InversifyCoreError(InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator, `Found unexpected missing metadata on type "${type.name}" at constructor indexes "${undefinedIndexes.join('", "')}".

Are you using @inject, @multiInject or @unmanaged decorators at those indexes?

If you're using typescript and want to rely on auto injection, set "emitDecoratorMetadata" compiler option to true`);
      }
    }
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/metadata/models/ClassElementMetadataKind.js
var require_ClassElementMetadataKind = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/metadata/models/ClassElementMetadataKind.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClassElementMetadataKind = void 0;
    var ClassElementMetadataKind;
    (function(ClassElementMetadataKind2) {
      ClassElementMetadataKind2[ClassElementMetadataKind2["multipleInjection"] = 0] = "multipleInjection";
      ClassElementMetadataKind2[ClassElementMetadataKind2["singleInjection"] = 1] = "singleInjection";
      ClassElementMetadataKind2[ClassElementMetadataKind2["unmanaged"] = 2] = "unmanaged";
    })(ClassElementMetadataKind || (exports.ClassElementMetadataKind = ClassElementMetadataKind = {}));
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassElementMetadataFromNewable.js
var require_getClassElementMetadataFromNewable = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassElementMetadataFromNewable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getClassElementMetadataFromNewable = getClassElementMetadataFromNewable;
    var ClassElementMetadataKind_1 = require_ClassElementMetadataKind();
    function getClassElementMetadataFromNewable(type) {
      return {
        kind: ClassElementMetadataKind_1.ClassElementMetadataKind.singleInjection,
        name: void 0,
        optional: false,
        tags: /* @__PURE__ */ new Map(),
        targetName: void 0,
        value: type
      };
    }
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassElementMetadataFromLegacyMetadata.js
var require_getClassElementMetadataFromLegacyMetadata = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassElementMetadataFromLegacyMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getClassElementMetadataFromLegacyMetadata = getClassElementMetadataFromLegacyMetadata;
    var InversifyCoreError_1 = require_InversifyCoreError();
    var InversifyCoreErrorKind_1 = require_InversifyCoreErrorKind();
    var keys_1 = require_keys();
    var ClassElementMetadataKind_1 = require_ClassElementMetadataKind();
    function getClassElementMetadataFromLegacyMetadata(metadataList) {
      const injectMetadata = metadataList.find((metadata) => metadata.key === keys_1.INJECT_TAG);
      const multiInjectMetadata = metadataList.find((metadata) => metadata.key === keys_1.MULTI_INJECT_TAG);
      const unmanagedMetadata = metadataList.find((metadata) => metadata.key === keys_1.UNMANAGED_TAG);
      if (unmanagedMetadata !== void 0) {
        return getUnmanagedClassElementMetadata(injectMetadata, multiInjectMetadata);
      }
      if (multiInjectMetadata === void 0 && injectMetadata === void 0) {
        throw new InversifyCoreError_1.InversifyCoreError(InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator, "Expected @inject, @multiInject or @unmanaged metadata");
      }
      const nameMetadata = metadataList.find((metadata) => metadata.key === keys_1.NAMED_TAG);
      const optionalMetadata = metadataList.find((metadata) => metadata.key === keys_1.OPTIONAL_TAG);
      const targetNameMetadata = metadataList.find((metadata) => metadata.key === keys_1.NAME_TAG);
      const managedClassElementMetadata = {
        kind: injectMetadata === void 0 ? ClassElementMetadataKind_1.ClassElementMetadataKind.multipleInjection : ClassElementMetadataKind_1.ClassElementMetadataKind.singleInjection,
        name: nameMetadata == null ? void 0 : nameMetadata.value,
        optional: optionalMetadata !== void 0,
        tags: new Map(metadataList.filter((metadata) => keys_1.NON_CUSTOM_TAG_KEYS.every((customTagKey) => metadata.key !== customTagKey)).map((metadata) => [
          metadata.key,
          metadata.value
        ])),
        targetName: targetNameMetadata == null ? void 0 : targetNameMetadata.value,
        value: injectMetadata === void 0 ? multiInjectMetadata == null ? void 0 : multiInjectMetadata.value : injectMetadata.value
      };
      return managedClassElementMetadata;
    }
    function getUnmanagedClassElementMetadata(injectMetadata, multiInjectMetadata) {
      if (multiInjectMetadata !== void 0 || injectMetadata !== void 0) {
        throw new InversifyCoreError_1.InversifyCoreError(InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator, "Expected a single @inject, @multiInject or @unmanaged metadata");
      }
      return {
        kind: ClassElementMetadataKind_1.ClassElementMetadataKind.unmanaged
      };
    }
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getConstructorArgumentMetadataFromLegacyMetadata.js
var require_getConstructorArgumentMetadataFromLegacyMetadata = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getConstructorArgumentMetadataFromLegacyMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getConstructorArgumentMetadataFromLegacyMetadata = getConstructorArgumentMetadataFromLegacyMetadata;
    var InversifyCoreError_1 = require_InversifyCoreError();
    var InversifyCoreErrorKind_1 = require_InversifyCoreErrorKind();
    var getClassElementMetadataFromLegacyMetadata_1 = require_getClassElementMetadataFromLegacyMetadata();
    function getConstructorArgumentMetadataFromLegacyMetadata(type, index, metadataList) {
      try {
        return (0, getClassElementMetadataFromLegacyMetadata_1.getClassElementMetadataFromLegacyMetadata)(metadataList);
      } catch (error) {
        if (InversifyCoreError_1.InversifyCoreError.isErrorOfKind(error, InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator)) {
          throw new InversifyCoreError_1.InversifyCoreError(InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator, `Expected a single @inject, @multiInject or @unmanaged decorator at type "${type.name}" at constructor arguments at index "${index.toString()}"`, { cause: error });
        } else {
          throw error;
        }
      }
    }
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadataConstructorArguments.js
var require_getClassMetadataConstructorArguments = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadataConstructorArguments.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getClassMetadataConstructorArguments = getClassMetadataConstructorArguments;
    var reflect_metadata_utils_1 = require_cjs2();
    var keys_1 = require_keys();
    var assertConstructorMetadataArrayFilled_1 = require_assertConstructorMetadataArrayFilled();
    var getClassElementMetadataFromNewable_1 = require_getClassElementMetadataFromNewable();
    var getConstructorArgumentMetadataFromLegacyMetadata_1 = require_getConstructorArgumentMetadataFromLegacyMetadata();
    function getClassMetadataConstructorArguments(type) {
      const typescriptMetadataList = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.DESIGN_PARAM_TYPES);
      const constructorParametersLegacyMetadata = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.TAGGED);
      const constructorArgumentsMetadata = [];
      if (constructorParametersLegacyMetadata !== void 0) {
        for (const [stringifiedIndex, metadataList] of Object.entries(constructorParametersLegacyMetadata)) {
          const index = parseInt(stringifiedIndex);
          constructorArgumentsMetadata[index] = (0, getConstructorArgumentMetadataFromLegacyMetadata_1.getConstructorArgumentMetadataFromLegacyMetadata)(type, index, metadataList);
        }
      }
      if (typescriptMetadataList !== void 0) {
        for (let i = 0; i < typescriptMetadataList.length; ++i) {
          if (constructorArgumentsMetadata[i] === void 0) {
            const typescriptMetadata = typescriptMetadataList[i];
            constructorArgumentsMetadata[i] = (0, getClassElementMetadataFromNewable_1.getClassElementMetadataFromNewable)(typescriptMetadata);
          }
        }
      }
      (0, assertConstructorMetadataArrayFilled_1.assertConstructorMetadataArrayFilled)(type, constructorArgumentsMetadata);
      return constructorArgumentsMetadata;
    }
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getPropertyMetadataFromLegacyMetadata.js
var require_getPropertyMetadataFromLegacyMetadata = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getPropertyMetadataFromLegacyMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPropertyMetadataFromLegacyMetadata = getPropertyMetadataFromLegacyMetadata;
    var InversifyCoreError_1 = require_InversifyCoreError();
    var InversifyCoreErrorKind_1 = require_InversifyCoreErrorKind();
    var getClassElementMetadataFromLegacyMetadata_1 = require_getClassElementMetadataFromLegacyMetadata();
    function getPropertyMetadataFromLegacyMetadata(type, key, metadataList) {
      try {
        return (0, getClassElementMetadataFromLegacyMetadata_1.getClassElementMetadataFromLegacyMetadata)(metadataList);
      } catch (error) {
        if (InversifyCoreError_1.InversifyCoreError.isErrorOfKind(error, InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator)) {
          throw new InversifyCoreError_1.InversifyCoreError(InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator, `Expected a single @inject, @multiInject or @unmanaged decorator at type "${type.name}" at property "${key.toString()}"`, { cause: error });
        } else {
          throw error;
        }
      }
    }
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadataProperties.js
var require_getClassMetadataProperties = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadataProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getClassMetadataProperties = getClassMetadataProperties;
    var reflect_metadata_utils_1 = require_cjs2();
    var keys_1 = require_keys();
    var getPropertyMetadataFromLegacyMetadata_1 = require_getPropertyMetadataFromLegacyMetadata();
    function getClassMetadataProperties(type) {
      const propertiesLegacyMetadata = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.TAGGED_PROP);
      const propertiesMetadata = /* @__PURE__ */ new Map();
      if (propertiesLegacyMetadata !== void 0) {
        for (const property of Reflect.ownKeys(propertiesLegacyMetadata)) {
          const legacyMetadata = propertiesLegacyMetadata[property];
          propertiesMetadata.set(property, (0, getPropertyMetadataFromLegacyMetadata_1.getPropertyMetadataFromLegacyMetadata)(type, property, legacyMetadata));
        }
      }
      return propertiesMetadata;
    }
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadata.js
var require_getClassMetadata = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getClassMetadata = getClassMetadata;
    var reflect_metadata_utils_1 = require_cjs2();
    var keys_1 = require_keys();
    var getClassMetadataConstructorArguments_1 = require_getClassMetadataConstructorArguments();
    var getClassMetadataProperties_1 = require_getClassMetadataProperties();
    function getClassMetadata(type) {
      const postConstructMetadata = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.POST_CONSTRUCT);
      const preDestroyMetadata = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.PRE_DESTROY);
      const classMetadata = {
        constructorArguments: (0, getClassMetadataConstructorArguments_1.getClassMetadataConstructorArguments)(type),
        lifecycle: {
          postConstructMethodName: postConstructMetadata == null ? void 0 : postConstructMetadata.value,
          preDestroyMethodName: preDestroyMetadata == null ? void 0 : preDestroyMetadata.value
        },
        properties: (0, getClassMetadataProperties_1.getClassMetadataProperties)(type)
      };
      return classMetadata;
    }
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadataConstructorArgumentsFromMetadataReader.js
var require_getClassMetadataConstructorArgumentsFromMetadataReader = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadataConstructorArgumentsFromMetadataReader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getClassMetadataConstructorArgumentsFromMetadataReader = getClassMetadataConstructorArgumentsFromMetadataReader;
    var assertConstructorMetadataArrayFilled_1 = require_assertConstructorMetadataArrayFilled();
    var getClassElementMetadataFromNewable_1 = require_getClassElementMetadataFromNewable();
    var getConstructorArgumentMetadataFromLegacyMetadata_1 = require_getConstructorArgumentMetadataFromLegacyMetadata();
    function getClassMetadataConstructorArgumentsFromMetadataReader(type, metadataReader) {
      const legacyConstructorMetadata = metadataReader.getConstructorMetadata(type);
      const constructorArgumentsMetadata = [];
      for (const [stringifiedIndex, metadataList] of Object.entries(legacyConstructorMetadata.userGeneratedMetadata)) {
        const index = parseInt(stringifiedIndex);
        constructorArgumentsMetadata[index] = (0, getConstructorArgumentMetadataFromLegacyMetadata_1.getConstructorArgumentMetadataFromLegacyMetadata)(type, index, metadataList);
      }
      if (legacyConstructorMetadata.compilerGeneratedMetadata !== void 0) {
        for (let i = 0; i < legacyConstructorMetadata.compilerGeneratedMetadata.length; ++i) {
          if (constructorArgumentsMetadata[i] === void 0) {
            const typescriptMetadata = legacyConstructorMetadata.compilerGeneratedMetadata[i];
            constructorArgumentsMetadata[i] = (0, getClassElementMetadataFromNewable_1.getClassElementMetadataFromNewable)(typescriptMetadata);
          }
        }
      }
      (0, assertConstructorMetadataArrayFilled_1.assertConstructorMetadataArrayFilled)(type, constructorArgumentsMetadata);
      return constructorArgumentsMetadata;
    }
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadataPropertiesFromMetadataReader.js
var require_getClassMetadataPropertiesFromMetadataReader = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadataPropertiesFromMetadataReader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getClassMetadataPropertiesFromMetadataReader = getClassMetadataPropertiesFromMetadataReader;
    var getPropertyMetadataFromLegacyMetadata_1 = require_getPropertyMetadataFromLegacyMetadata();
    function getClassMetadataPropertiesFromMetadataReader(type, metadataReader) {
      const propertiesLegacyMetadata = metadataReader.getPropertiesMetadata(type);
      const propertiesMetadata = /* @__PURE__ */ new Map();
      for (const property of Reflect.ownKeys(propertiesLegacyMetadata)) {
        const legacyMetadata = propertiesLegacyMetadata[property];
        propertiesMetadata.set(property, (0, getPropertyMetadataFromLegacyMetadata_1.getPropertyMetadataFromLegacyMetadata)(type, property, legacyMetadata));
      }
      return propertiesMetadata;
    }
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadataFromMetadataReader.js
var require_getClassMetadataFromMetadataReader = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadataFromMetadataReader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getClassMetadataFromMetadataReader = getClassMetadataFromMetadataReader;
    var reflect_metadata_utils_1 = require_cjs2();
    var keys_1 = require_keys();
    var getClassMetadataConstructorArgumentsFromMetadataReader_1 = require_getClassMetadataConstructorArgumentsFromMetadataReader();
    var getClassMetadataPropertiesFromMetadataReader_1 = require_getClassMetadataPropertiesFromMetadataReader();
    function getClassMetadataFromMetadataReader(type, metadataReader) {
      const postConstructMetadata = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.POST_CONSTRUCT);
      const preDestroyMetadata = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.PRE_DESTROY);
      const classMetadata = {
        constructorArguments: (0, getClassMetadataConstructorArgumentsFromMetadataReader_1.getClassMetadataConstructorArgumentsFromMetadataReader)(type, metadataReader),
        lifecycle: {
          postConstructMethodName: postConstructMetadata == null ? void 0 : postConstructMetadata.value,
          preDestroyMethodName: preDestroyMetadata == null ? void 0 : preDestroyMetadata.value
        },
        properties: (0, getClassMetadataPropertiesFromMetadataReader_1.getClassMetadataPropertiesFromMetadataReader)(type, metadataReader)
      };
      return classMetadata;
    }
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/prototype/calculations/getBaseType.js
var require_getBaseType = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/prototype/calculations/getBaseType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getBaseType = getBaseType;
    function getBaseType(type) {
      const prototype = Object.getPrototypeOf(type.prototype);
      const baseType = prototype == null ? void 0 : prototype.constructor;
      return baseType;
    }
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getLegacyMetadata.js
var require_getLegacyMetadata = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getLegacyMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLegacyMetadata = getLegacyMetadata;
    var keys_1 = require_keys();
    var ClassElementMetadataKind_1 = require_ClassElementMetadataKind();
    function getLegacyMetadata(classElementMetadata) {
      switch (classElementMetadata.kind) {
        case ClassElementMetadataKind_1.ClassElementMetadataKind.unmanaged:
          return getUnmanagedLegacyMetadata();
        default:
          return getManagedLegacyMetadata(classElementMetadata);
      }
    }
    function getManagedLegacyMetadata(classElementMetadata) {
      const legacyMetadataList = [
        getManagedKindLegacyMetadata(classElementMetadata)
      ];
      if (classElementMetadata.name !== void 0) {
        legacyMetadataList.push({
          key: keys_1.NAMED_TAG,
          value: classElementMetadata.name
        });
      }
      if (classElementMetadata.optional) {
        legacyMetadataList.push({
          key: keys_1.OPTIONAL_TAG,
          value: true
        });
      }
      for (const [tagKey, tagValue] of classElementMetadata.tags) {
        legacyMetadataList.push({
          key: tagKey,
          value: tagValue
        });
      }
      if (classElementMetadata.targetName !== void 0) {
        legacyMetadataList.push({
          key: keys_1.NAME_TAG,
          value: classElementMetadata.targetName
        });
      }
      return legacyMetadataList;
    }
    function getManagedKindLegacyMetadata(classElementMetadata) {
      let kindLegacyMetadata;
      switch (classElementMetadata.kind) {
        case ClassElementMetadataKind_1.ClassElementMetadataKind.multipleInjection:
          kindLegacyMetadata = {
            key: keys_1.MULTI_INJECT_TAG,
            value: classElementMetadata.value
          };
          break;
        case ClassElementMetadataKind_1.ClassElementMetadataKind.singleInjection:
          kindLegacyMetadata = {
            key: keys_1.INJECT_TAG,
            value: classElementMetadata.value
          };
          break;
      }
      return kindLegacyMetadata;
    }
    function getUnmanagedLegacyMetadata() {
      return [
        {
          key: keys_1.UNMANAGED_TAG,
          value: true
        }
      ];
    }
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/string/models/LegacyQueryableStringImpl.js
var require_LegacyQueryableStringImpl = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/string/models/LegacyQueryableStringImpl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LegacyQueryableStringImpl = void 0;
    var _str;
    var LegacyQueryableStringImpl = class {
      constructor(str) {
        __privateAdd(this, _str);
        __privateSet(this, _str, str);
      }
      startsWith(searchString) {
        return __privateGet(this, _str).startsWith(searchString);
      }
      endsWith(searchString) {
        return __privateGet(this, _str).endsWith(searchString);
      }
      contains(searchString) {
        return __privateGet(this, _str).includes(searchString);
      }
      equals(compareString) {
        return __privateGet(this, _str) === compareString;
      }
      value() {
        return __privateGet(this, _str);
      }
    };
    _str = new WeakMap();
    exports.LegacyQueryableStringImpl = LegacyQueryableStringImpl;
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/symbol/calculations/getDescription.js
var require_getDescription = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/symbol/calculations/getDescription.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDescription = getDescription;
    var SYMBOL_INDEX_START = 7;
    var SYMBOL_INDEX_END = -1;
    function getDescription(symbol) {
      return symbol.toString().slice(SYMBOL_INDEX_START, SYMBOL_INDEX_END);
    }
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/legacyTarget/calculations/getTargetId.js
var require_getTargetId = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/legacyTarget/calculations/getTargetId.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTargetId = getTargetId;
    var reflect_metadata_utils_1 = require_cjs2();
    var ID_METADATA = "@inversifyjs/core/targetId";
    function getTargetId() {
      const targetId = (0, reflect_metadata_utils_1.getReflectMetadata)(Object, ID_METADATA) ?? 0;
      if (targetId === Number.MAX_SAFE_INTEGER) {
        (0, reflect_metadata_utils_1.updateReflectMetadata)(Object, ID_METADATA, targetId, () => Number.MIN_SAFE_INTEGER);
      } else {
        (0, reflect_metadata_utils_1.updateReflectMetadata)(Object, ID_METADATA, targetId, (id) => id + 1);
      }
      return targetId;
    }
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/legacyTarget/models/LegacyTargetImpl.js
var require_LegacyTargetImpl = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/legacyTarget/models/LegacyTargetImpl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LegacyTargetImpl = void 0;
    var common_1 = require_cjs();
    var getLegacyMetadata_1 = require_getLegacyMetadata();
    var ClassElementMetadataKind_1 = require_ClassElementMetadataKind();
    var keys_1 = require_keys();
    var LegacyQueryableStringImpl_1 = require_LegacyQueryableStringImpl();
    var getDescription_1 = require_getDescription();
    var getTargetId_1 = require_getTargetId();
    var _metadata, _id, _identifier, _lazyLegacyMetadata, _name, _type;
    var LegacyTargetImpl = class {
      constructor(identifier, metadata, type) {
        __privateAdd(this, _metadata);
        __privateAdd(this, _id);
        __privateAdd(this, _identifier);
        __privateAdd(this, _lazyLegacyMetadata);
        __privateAdd(this, _name);
        __privateAdd(this, _type);
        __privateSet(this, _id, (0, getTargetId_1.getTargetId)());
        __privateSet(this, _identifier, identifier);
        __privateSet(this, _lazyLegacyMetadata, void 0);
        __privateSet(this, _metadata, metadata);
        __privateSet(this, _name, new LegacyQueryableStringImpl_1.LegacyQueryableStringImpl(typeof identifier === "string" ? identifier : (0, getDescription_1.getDescription)(identifier)));
        __privateSet(this, _type, type);
      }
      get id() {
        return __privateGet(this, _id);
      }
      /**
       * If this is a class property target, this is the name of the property to be injected
       */
      get identifier() {
        return __privateGet(this, _identifier);
      }
      get metadata() {
        if (__privateGet(this, _lazyLegacyMetadata) === void 0) {
          __privateSet(this, _lazyLegacyMetadata, (0, getLegacyMetadata_1.getLegacyMetadata)(__privateGet(this, _metadata)));
        }
        return __privateGet(this, _lazyLegacyMetadata);
      }
      get name() {
        return __privateGet(this, _name);
      }
      get type() {
        return __privateGet(this, _type);
      }
      get serviceIdentifier() {
        if (common_1.LazyServiceIdentifier.is(__privateGet(this, _metadata).value)) {
          return __privateGet(this, _metadata).value.unwrap();
        } else {
          return __privateGet(this, _metadata).value;
        }
      }
      getCustomTags() {
        return [...__privateGet(this, _metadata).tags.entries()].map(([key, value]) => ({
          key,
          value
        }));
      }
      getNamedTag() {
        return __privateGet(this, _metadata).name === void 0 ? null : {
          key: keys_1.NAMED_TAG,
          value: __privateGet(this, _metadata).name
        };
      }
      hasTag(key) {
        return this.metadata.some((metadata) => metadata.key === key);
      }
      isArray() {
        return __privateGet(this, _metadata).kind === ClassElementMetadataKind_1.ClassElementMetadataKind.multipleInjection;
      }
      isNamed() {
        return __privateGet(this, _metadata).name !== void 0;
      }
      isOptional() {
        return __privateGet(this, _metadata).optional;
      }
      isTagged() {
        return __privateGet(this, _metadata).tags.size > 0;
      }
      matchesArray(name) {
        return this.isArray() && __privateGet(this, _metadata).value === name;
      }
      matchesNamedTag(name) {
        return __privateGet(this, _metadata).name === name;
      }
      matchesTag(key) {
        return (value) => this.metadata.some((metadata) => metadata.key === key && metadata.value === value);
      }
    };
    _metadata = new WeakMap();
    _id = new WeakMap();
    _identifier = new WeakMap();
    _lazyLegacyMetadata = new WeakMap();
    _name = new WeakMap();
    _type = new WeakMap();
    exports.LegacyTargetImpl = LegacyTargetImpl;
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/legacyTarget/calculations/getTargetsFromMetadataProviders.js
var require_getTargetsFromMetadataProviders = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/legacyTarget/calculations/getTargetsFromMetadataProviders.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTargetsFromMetadataProviders = getTargetsFromMetadataProviders;
    var ClassElementMetadataKind_1 = require_ClassElementMetadataKind();
    var getBaseType_1 = require_getBaseType();
    var LegacyTargetImpl_1 = require_LegacyTargetImpl();
    function getTargetsFromMetadataProviders(getClassMetadata, getClassMetadataProperties) {
      return function getTagets(type) {
        const classMetadata = getClassMetadata(type);
        let baseType = (0, getBaseType_1.getBaseType)(type);
        while (baseType !== void 0 && baseType !== Object) {
          const classMetadataProperties = getClassMetadataProperties(baseType);
          for (const [propertyKey, propertyValue] of classMetadataProperties) {
            if (!classMetadata.properties.has(propertyKey)) {
              classMetadata.properties.set(propertyKey, propertyValue);
            }
          }
          baseType = (0, getBaseType_1.getBaseType)(baseType);
        }
        const targets = [];
        for (const constructorArgument of classMetadata.constructorArguments) {
          if (constructorArgument.kind !== ClassElementMetadataKind_1.ClassElementMetadataKind.unmanaged) {
            const targetName = constructorArgument.targetName ?? "";
            targets.push(new LegacyTargetImpl_1.LegacyTargetImpl(targetName, constructorArgument, "ConstructorArgument"));
          }
        }
        for (const [property, metadata] of classMetadata.properties) {
          if (metadata.kind !== ClassElementMetadataKind_1.ClassElementMetadataKind.unmanaged) {
            const targetName = metadata.targetName ?? property;
            targets.push(new LegacyTargetImpl_1.LegacyTargetImpl(targetName, metadata, "ClassProperty"));
          }
        }
        return targets;
      };
    }
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/legacyTarget/calculations/getTargets.js
var require_getTargets = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/legacyTarget/calculations/getTargets.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTargets = void 0;
    var getClassMetadata_1 = require_getClassMetadata();
    var getClassMetadataFromMetadataReader_1 = require_getClassMetadataFromMetadataReader();
    var getClassMetadataProperties_1 = require_getClassMetadataProperties();
    var getClassMetadataPropertiesFromMetadataReader_1 = require_getClassMetadataPropertiesFromMetadataReader();
    var getTargetsFromMetadataProviders_1 = require_getTargetsFromMetadataProviders();
    var getTargets = (metadataReader) => {
      const getClassMetadataFn = metadataReader === void 0 ? getClassMetadata_1.getClassMetadata : (type) => (0, getClassMetadataFromMetadataReader_1.getClassMetadataFromMetadataReader)(type, metadataReader);
      const getClassMetadataPropertiesFn = metadataReader === void 0 ? getClassMetadataProperties_1.getClassMetadataProperties : (type) => (0, getClassMetadataPropertiesFromMetadataReader_1.getClassMetadataPropertiesFromMetadataReader)(type, metadataReader);
      return (0, getTargetsFromMetadataProviders_1.getTargetsFromMetadataProviders)(getClassMetadataFn, getClassMetadataPropertiesFn);
    };
    exports.getTargets = getTargets;
  }
});

// ../../../node_modules/@inversifyjs/core/lib/cjs/index.js
var require_cjs3 = __commonJS({
  "../../../node_modules/@inversifyjs/core/lib/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LegacyTargetImpl = exports.getTargets = exports.getClassMetadataFromMetadataReader = exports.getClassMetadata = exports.getClassElementMetadataFromLegacyMetadata = exports.ClassElementMetadataKind = void 0;
    var getTargets_1 = require_getTargets();
    Object.defineProperty(exports, "getTargets", { enumerable: true, get: function() {
      return getTargets_1.getTargets;
    } });
    var LegacyTargetImpl_1 = require_LegacyTargetImpl();
    Object.defineProperty(exports, "LegacyTargetImpl", { enumerable: true, get: function() {
      return LegacyTargetImpl_1.LegacyTargetImpl;
    } });
    var getClassElementMetadataFromLegacyMetadata_1 = require_getClassElementMetadataFromLegacyMetadata();
    Object.defineProperty(exports, "getClassElementMetadataFromLegacyMetadata", { enumerable: true, get: function() {
      return getClassElementMetadataFromLegacyMetadata_1.getClassElementMetadataFromLegacyMetadata;
    } });
    var getClassMetadata_1 = require_getClassMetadata();
    Object.defineProperty(exports, "getClassMetadata", { enumerable: true, get: function() {
      return getClassMetadata_1.getClassMetadata;
    } });
    var getClassMetadataFromMetadataReader_1 = require_getClassMetadataFromMetadataReader();
    Object.defineProperty(exports, "getClassMetadataFromMetadataReader", { enumerable: true, get: function() {
      return getClassMetadataFromMetadataReader_1.getClassMetadataFromMetadataReader;
    } });
    var ClassElementMetadataKind_1 = require_ClassElementMetadataKind();
    Object.defineProperty(exports, "ClassElementMetadataKind", { enumerable: true, get: function() {
      return ClassElementMetadataKind_1.ClassElementMetadataKind;
    } });
  }
});

// ../../../node_modules/inversify/lib/cjs/bindings/binding_count.js
var require_binding_count = __commonJS({
  "../../../node_modules/inversify/lib/cjs/bindings/binding_count.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingCount = void 0;
    var BindingCount;
    (function(BindingCount2) {
      BindingCount2[BindingCount2["MultipleBindingsAvailable"] = 2] = "MultipleBindingsAvailable";
      BindingCount2[BindingCount2["NoBindingsAvailable"] = 0] = "NoBindingsAvailable";
      BindingCount2[BindingCount2["OnlyOneBindingAvailable"] = 1] = "OnlyOneBindingAvailable";
    })(BindingCount || (exports.BindingCount = BindingCount = {}));
  }
});

// ../../../node_modules/inversify/lib/cjs/utils/exceptions.js
var require_exceptions = __commonJS({
  "../../../node_modules/inversify/lib/cjs/utils/exceptions.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tryAndThrowErrorIfStackOverflow = void 0;
    exports.isStackOverflowException = isStackOverflowException;
    var ERROR_MSGS = __importStar2(require_error_msgs());
    function isStackOverflowException(error) {
      return error instanceof RangeError || error.message === ERROR_MSGS.STACK_OVERFLOW;
    }
    var tryAndThrowErrorIfStackOverflow = (fn, errorCallback) => {
      try {
        return fn();
      } catch (error) {
        if (isStackOverflowException(error)) {
          throw errorCallback();
        }
        throw error;
      }
    };
    exports.tryAndThrowErrorIfStackOverflow = tryAndThrowErrorIfStackOverflow;
  }
});

// ../../../node_modules/inversify/lib/cjs/utils/serialization.js
var require_serialization = __commonJS({
  "../../../node_modules/inversify/lib/cjs/utils/serialization.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFunctionName = getFunctionName;
    exports.getServiceIdentifierAsString = getServiceIdentifierAsString;
    exports.listRegisteredBindingsForServiceIdentifier = listRegisteredBindingsForServiceIdentifier;
    exports.listMetadataForTarget = listMetadataForTarget;
    exports.circularDependencyToException = circularDependencyToException;
    exports.getSymbolDescription = getSymbolDescription;
    var ERROR_MSGS = __importStar2(require_error_msgs());
    function getServiceIdentifierAsString(serviceIdentifier) {
      if (typeof serviceIdentifier === "function") {
        return serviceIdentifier.name;
      } else if (typeof serviceIdentifier === "symbol") {
        return serviceIdentifier.toString();
      } else {
        return serviceIdentifier;
      }
    }
    function listRegisteredBindingsForServiceIdentifier(container, serviceIdentifier, getBindings) {
      let registeredBindingsList = "";
      const registeredBindings = getBindings(container, serviceIdentifier);
      if (registeredBindings.length !== 0) {
        registeredBindingsList = "\nRegistered bindings:";
        registeredBindings.forEach((binding) => {
          let name = "Object";
          if (binding.implementationType !== null) {
            name = getFunctionName(binding.implementationType);
          }
          registeredBindingsList = `${registeredBindingsList}
 ${name}`;
          if (binding.constraint.metaData) {
            registeredBindingsList = `${registeredBindingsList} - ${binding.constraint.metaData}`;
          }
        });
      }
      return registeredBindingsList;
    }
    function alreadyDependencyChain(request, serviceIdentifier) {
      if (request.parentRequest === null) {
        return false;
      } else if (request.parentRequest.serviceIdentifier === serviceIdentifier) {
        return true;
      } else {
        return alreadyDependencyChain(request.parentRequest, serviceIdentifier);
      }
    }
    function dependencyChainToString(request) {
      function _createStringArr(req, result = []) {
        const serviceIdentifier = getServiceIdentifierAsString(req.serviceIdentifier);
        result.push(serviceIdentifier);
        if (req.parentRequest !== null) {
          return _createStringArr(req.parentRequest, result);
        }
        return result;
      }
      const stringArr = _createStringArr(request);
      return stringArr.reverse().join(" --> ");
    }
    function circularDependencyToException(request) {
      request.childRequests.forEach((childRequest) => {
        if (alreadyDependencyChain(request, childRequest.serviceIdentifier)) {
          const services = dependencyChainToString(childRequest);
          throw new Error(`${ERROR_MSGS.CIRCULAR_DEPENDENCY} ${services}`);
        } else {
          circularDependencyToException(childRequest);
        }
      });
    }
    function listMetadataForTarget(serviceIdentifierString, target) {
      if (target.isTagged() || target.isNamed()) {
        let m = "";
        const namedTag = target.getNamedTag();
        const otherTags = target.getCustomTags();
        if (namedTag !== null) {
          m += stringifyMetadata(namedTag) + "\n";
        }
        if (otherTags !== null) {
          otherTags.forEach((tag) => {
            m += stringifyMetadata(tag) + "\n";
          });
        }
        return ` ${serviceIdentifierString}
 ${serviceIdentifierString} - ${m}`;
      } else {
        return ` ${serviceIdentifierString}`;
      }
    }
    function getFunctionName(func) {
      if (func.name != null && func.name !== "") {
        return func.name;
      } else {
        const name = func.toString();
        const match = name.match(/^function\s*([^\s(]+)/);
        return match === null ? `Anonymous function: ${name}` : match[1];
      }
    }
    function getSymbolDescription(symbol) {
      return symbol.toString().slice(7, -1);
    }
    function stringifyMetadata(metadata) {
      return `{"key":"${metadata.key.toString()}","value":"${metadata.value.toString()}"}`;
    }
  }
});

// ../../../node_modules/inversify/lib/cjs/planning/context.js
var require_context = __commonJS({
  "../../../node_modules/inversify/lib/cjs/planning/context.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Context = void 0;
    var id_1 = require_id();
    var Context = class {
      constructor(container) {
        __publicField(this, "id");
        __publicField(this, "container");
        __publicField(this, "plan");
        __publicField(this, "currentRequest");
        this.id = (0, id_1.id)();
        this.container = container;
      }
      addPlan(plan) {
        this.plan = plan;
      }
      setCurrentRequest(currentRequest) {
        this.currentRequest = currentRequest;
      }
    };
    exports.Context = Context;
  }
});

// ../../../node_modules/inversify/lib/cjs/planning/metadata.js
var require_metadata = __commonJS({
  "../../../node_modules/inversify/lib/cjs/planning/metadata.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Metadata = void 0;
    var METADATA_KEY = __importStar2(require_metadata_keys());
    var Metadata = class {
      constructor(key, value) {
        __publicField(this, "key");
        __publicField(this, "value");
        this.key = key;
        this.value = value;
      }
      toString() {
        if (this.key === METADATA_KEY.NAMED_TAG) {
          return `named: ${String(this.value).toString()} `;
        } else {
          return `tagged: { key:${this.key.toString()}, value: ${String(this.value)} }`;
        }
      }
    };
    exports.Metadata = Metadata;
  }
});

// ../../../node_modules/inversify/lib/cjs/planning/plan.js
var require_plan = __commonJS({
  "../../../node_modules/inversify/lib/cjs/planning/plan.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Plan = void 0;
    var Plan = class {
      constructor(parentContext, rootRequest) {
        __publicField(this, "parentContext");
        __publicField(this, "rootRequest");
        this.parentContext = parentContext;
        this.rootRequest = rootRequest;
      }
    };
    exports.Plan = Plan;
  }
});

// ../../../node_modules/inversify/lib/cjs/utils/get_base_type.js
var require_get_base_type = __commonJS({
  "../../../node_modules/inversify/lib/cjs/utils/get_base_type.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getBaseType = getBaseType;
    function getBaseType(type) {
      const prototype = Object.getPrototypeOf(type.prototype);
      const baseType = prototype == null ? void 0 : prototype.constructor;
      return baseType;
    }
  }
});

// ../../../node_modules/inversify/lib/cjs/planning/reflection_utils.js
var require_reflection_utils = __commonJS({
  "../../../node_modules/inversify/lib/cjs/planning/reflection_utils.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFunctionName = void 0;
    exports.getDependencies = getDependencies;
    exports.getBaseClassDependencyCount = getBaseClassDependencyCount;
    var core_1 = require_cjs3();
    var METADATA_KEY = __importStar2(require_metadata_keys());
    var get_base_type_1 = require_get_base_type();
    var serialization_1 = require_serialization();
    Object.defineProperty(exports, "getFunctionName", { enumerable: true, get: function() {
      return serialization_1.getFunctionName;
    } });
    function getDependencies(metadataReader, func) {
      return (0, core_1.getTargets)(metadataReader)(func);
    }
    function getBaseClassDependencyCount(metadataReader, func) {
      const baseConstructor = (0, get_base_type_1.getBaseType)(func);
      if (baseConstructor === void 0 || baseConstructor === Object) {
        return 0;
      }
      const targets = (0, core_1.getTargets)(metadataReader)(baseConstructor);
      const metadata = targets.map((t) => t.metadata.filter((m) => m.key === METADATA_KEY.UNMANAGED_TAG));
      const unmanagedCount = [].concat.apply([], metadata).length;
      const dependencyCount = targets.length - unmanagedCount;
      if (dependencyCount > 0) {
        return dependencyCount;
      } else {
        return getBaseClassDependencyCount(metadataReader, baseConstructor);
      }
    }
  }
});

// ../../../node_modules/inversify/lib/cjs/planning/request.js
var require_request = __commonJS({
  "../../../node_modules/inversify/lib/cjs/planning/request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Request = void 0;
    var id_1 = require_id();
    var Request = class _Request {
      constructor(serviceIdentifier, parentContext, parentRequest, bindings, target) {
        __publicField(this, "id");
        __publicField(this, "serviceIdentifier");
        __publicField(this, "parentContext");
        __publicField(this, "parentRequest");
        __publicField(this, "bindings");
        __publicField(this, "childRequests");
        __publicField(this, "target");
        __publicField(this, "requestScope");
        this.id = (0, id_1.id)();
        this.serviceIdentifier = serviceIdentifier;
        this.parentContext = parentContext;
        this.parentRequest = parentRequest;
        this.target = target;
        this.childRequests = [];
        this.bindings = Array.isArray(bindings) ? bindings : [bindings];
        this.requestScope = parentRequest === null ? /* @__PURE__ */ new Map() : null;
      }
      addChildRequest(serviceIdentifier, bindings, target) {
        const child = new _Request(serviceIdentifier, this.parentContext, this, bindings, target);
        this.childRequests.push(child);
        return child;
      }
    };
    exports.Request = Request;
  }
});

// ../../../node_modules/inversify/lib/cjs/planning/planner.js
var require_planner = __commonJS({
  "../../../node_modules/inversify/lib/cjs/planning/planner.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getBindingDictionary = getBindingDictionary;
    exports.plan = plan;
    exports.createMockRequest = createMockRequest;
    var core_1 = require_cjs3();
    var binding_count_1 = require_binding_count();
    var ERROR_MSGS = __importStar2(require_error_msgs());
    var literal_types_1 = require_literal_types();
    var METADATA_KEY = __importStar2(require_metadata_keys());
    var exceptions_1 = require_exceptions();
    var serialization_1 = require_serialization();
    var context_1 = require_context();
    var metadata_1 = require_metadata();
    var plan_1 = require_plan();
    var reflection_utils_1 = require_reflection_utils();
    var request_1 = require_request();
    function getBindingDictionary(cntnr) {
      return cntnr._bindingDictionary;
    }
    function _createTarget(targetType, serviceIdentifier, metadata) {
      const metadataList = _getTargetMetadata(serviceIdentifier, metadata);
      const classElementMetadata = (0, core_1.getClassElementMetadataFromLegacyMetadata)(metadataList);
      if (classElementMetadata.kind === core_1.ClassElementMetadataKind.unmanaged) {
        throw new Error("Unexpected metadata when creating target");
      }
      const target = new core_1.LegacyTargetImpl("", classElementMetadata, targetType);
      return target;
    }
    function _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target) {
      let bindings = getBindings(context.container, target.serviceIdentifier);
      let activeBindings = [];
      if (bindings.length === binding_count_1.BindingCount.NoBindingsAvailable && context.container.options.autoBindInjectable === true && typeof target.serviceIdentifier === "function" && metadataReader.getConstructorMetadata(target.serviceIdentifier).compilerGeneratedMetadata) {
        context.container.bind(target.serviceIdentifier).toSelf();
        bindings = getBindings(context.container, target.serviceIdentifier);
      }
      if (!avoidConstraints) {
        activeBindings = bindings.filter((binding) => {
          const request = new request_1.Request(binding.serviceIdentifier, context, parentRequest, binding, target);
          return binding.constraint(request);
        });
      } else {
        activeBindings = bindings;
      }
      _validateActiveBindingCount(target.serviceIdentifier, activeBindings, parentRequest, target, context.container);
      return activeBindings;
    }
    function _getTargetMetadata(serviceIdentifier, metadata) {
      const metadataKey = metadata.isMultiInject ? METADATA_KEY.MULTI_INJECT_TAG : METADATA_KEY.INJECT_TAG;
      const metadataList = [
        new metadata_1.Metadata(metadataKey, serviceIdentifier)
      ];
      if (metadata.customTag !== void 0) {
        metadataList.push(new metadata_1.Metadata(metadata.customTag.key, metadata.customTag.value));
      }
      if (metadata.isOptional === true) {
        metadataList.push(new metadata_1.Metadata(METADATA_KEY.OPTIONAL_TAG, true));
      }
      return metadataList;
    }
    function _validateActiveBindingCount(serviceIdentifier, bindings, parentRequest, target, container) {
      switch (bindings.length) {
        case binding_count_1.BindingCount.NoBindingsAvailable:
          if (target.isOptional()) {
            return bindings;
          } else {
            const serviceIdentifierString = (0, serialization_1.getServiceIdentifierAsString)(serviceIdentifier);
            let msg = ERROR_MSGS.NOT_REGISTERED;
            msg += (0, serialization_1.listMetadataForTarget)(serviceIdentifierString, target);
            msg += (0, serialization_1.listRegisteredBindingsForServiceIdentifier)(container, serviceIdentifierString, getBindings);
            if (parentRequest !== null) {
              msg += `
${ERROR_MSGS.TRYING_TO_RESOLVE_BINDINGS((0, serialization_1.getServiceIdentifierAsString)(parentRequest.serviceIdentifier))}`;
            }
            throw new Error(msg);
          }
        case binding_count_1.BindingCount.OnlyOneBindingAvailable:
          return bindings;
        case binding_count_1.BindingCount.MultipleBindingsAvailable:
        default:
          if (!target.isArray()) {
            const serviceIdentifierString = (0, serialization_1.getServiceIdentifierAsString)(serviceIdentifier);
            let msg = `${ERROR_MSGS.AMBIGUOUS_MATCH} ${serviceIdentifierString}`;
            msg += (0, serialization_1.listRegisteredBindingsForServiceIdentifier)(container, serviceIdentifierString, getBindings);
            throw new Error(msg);
          } else {
            return bindings;
          }
      }
    }
    function _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, parentRequest, target) {
      let activeBindings;
      let childRequest;
      if (parentRequest === null) {
        activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, null, target);
        childRequest = new request_1.Request(serviceIdentifier, context, null, activeBindings, target);
        const thePlan = new plan_1.Plan(context, childRequest);
        context.addPlan(thePlan);
      } else {
        activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target);
        childRequest = parentRequest.addChildRequest(target.serviceIdentifier, activeBindings, target);
      }
      activeBindings.forEach((binding) => {
        let subChildRequest = null;
        if (target.isArray()) {
          subChildRequest = childRequest.addChildRequest(binding.serviceIdentifier, binding, target);
        } else {
          if (binding.cache !== null) {
            return;
          }
          subChildRequest = childRequest;
        }
        if (binding.type === literal_types_1.BindingTypeEnum.Instance && binding.implementationType !== null) {
          const dependencies = (0, reflection_utils_1.getDependencies)(metadataReader, binding.implementationType);
          if (context.container.options.skipBaseClassChecks !== true) {
            const baseClassDependencyCount = (0, reflection_utils_1.getBaseClassDependencyCount)(metadataReader, binding.implementationType);
            if (dependencies.length < baseClassDependencyCount) {
              const error = ERROR_MSGS.ARGUMENTS_LENGTH_MISMATCH((0, reflection_utils_1.getFunctionName)(binding.implementationType));
              throw new Error(error);
            }
          }
          dependencies.forEach((dependency) => {
            _createSubRequests(metadataReader, false, dependency.serviceIdentifier, context, subChildRequest, dependency);
          });
        }
      });
    }
    function getBindings(container, serviceIdentifier) {
      let bindings = [];
      const bindingDictionary = getBindingDictionary(container);
      if (bindingDictionary.hasKey(serviceIdentifier)) {
        bindings = bindingDictionary.get(serviceIdentifier);
      } else if (container.parent !== null) {
        bindings = getBindings(container.parent, serviceIdentifier);
      }
      return bindings;
    }
    function plan(metadataReader, container, targetType, serviceIdentifier, metadata, avoidConstraints = false) {
      const context = new context_1.Context(container);
      const target = _createTarget(targetType, serviceIdentifier, metadata);
      try {
        _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, null, target);
        return context;
      } catch (error) {
        if ((0, exceptions_1.isStackOverflowException)(error)) {
          (0, serialization_1.circularDependencyToException)(context.plan.rootRequest);
        }
        throw error;
      }
    }
    function createMockRequest(container, serviceIdentifier, metadata) {
      const metadataList = _getTargetMetadata(serviceIdentifier, metadata);
      const classElementMetadata = (0, core_1.getClassElementMetadataFromLegacyMetadata)(metadataList);
      if (classElementMetadata.kind === core_1.ClassElementMetadataKind.unmanaged) {
        throw new Error("Unexpected metadata when creating target");
      }
      const target = new core_1.LegacyTargetImpl("", classElementMetadata, "Variable");
      const context = new context_1.Context(container);
      const request = new request_1.Request(serviceIdentifier, context, null, [], target);
      return request;
    }
  }
});

// ../../../node_modules/inversify/lib/cjs/utils/async.js
var require_async = __commonJS({
  "../../../node_modules/inversify/lib/cjs/utils/async.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isPromise = isPromise;
    exports.isPromiseOrContainsPromise = isPromiseOrContainsPromise;
    function isPromise(object) {
      const isObjectOrFunction = typeof object === "object" && object !== null || typeof object === "function";
      return isObjectOrFunction && typeof object.then === "function";
    }
    function isPromiseOrContainsPromise(object) {
      if (isPromise(object)) {
        return true;
      }
      return Array.isArray(object) && object.some(isPromise);
    }
  }
});

// ../../../node_modules/inversify/lib/cjs/scope/scope.js
var require_scope = __commonJS({
  "../../../node_modules/inversify/lib/cjs/scope/scope.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.saveToScope = exports.tryGetFromScope = void 0;
    var literal_types_1 = require_literal_types();
    var async_1 = require_async();
    var tryGetFromScope = (requestScope, binding) => {
      if (binding.scope === literal_types_1.BindingScopeEnum.Singleton && binding.activated) {
        return binding.cache;
      }
      if (binding.scope === literal_types_1.BindingScopeEnum.Request && requestScope.has(binding.id)) {
        return requestScope.get(binding.id);
      }
      return null;
    };
    exports.tryGetFromScope = tryGetFromScope;
    var saveToScope = (requestScope, binding, result) => {
      if (binding.scope === literal_types_1.BindingScopeEnum.Singleton) {
        _saveToSingletonScope(binding, result);
      }
      if (binding.scope === literal_types_1.BindingScopeEnum.Request) {
        _saveToRequestScope(requestScope, binding, result);
      }
    };
    exports.saveToScope = saveToScope;
    var _saveToRequestScope = (requestScope, binding, result) => {
      if (!requestScope.has(binding.id)) {
        requestScope.set(binding.id, result);
      }
    };
    var _saveToSingletonScope = (binding, result) => {
      binding.cache = result;
      binding.activated = true;
      if ((0, async_1.isPromise)(result)) {
        void _saveAsyncResultToSingletonScope(binding, result);
      }
    };
    var _saveAsyncResultToSingletonScope = async (binding, asyncResult) => {
      try {
        const result = await asyncResult;
        binding.cache = result;
      } catch (ex) {
        binding.cache = null;
        binding.activated = false;
        throw ex;
      }
    };
  }
});

// ../../../node_modules/inversify/lib/cjs/utils/factory_type.js
var require_factory_type = __commonJS({
  "../../../node_modules/inversify/lib/cjs/utils/factory_type.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FactoryType = void 0;
    var FactoryType;
    (function(FactoryType2) {
      FactoryType2["DynamicValue"] = "toDynamicValue";
      FactoryType2["Factory"] = "toFactory";
      FactoryType2["Provider"] = "toProvider";
    })(FactoryType || (exports.FactoryType = FactoryType = {}));
  }
});

// ../../../node_modules/inversify/lib/cjs/utils/binding_utils.js
var require_binding_utils = __commonJS({
  "../../../node_modules/inversify/lib/cjs/utils/binding_utils.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFactoryDetails = exports.ensureFullyBound = exports.multiBindToService = void 0;
    var ERROR_MSGS = __importStar2(require_error_msgs());
    var literal_types_1 = require_literal_types();
    var serialization_1 = require_serialization();
    var factory_type_1 = require_factory_type();
    var multiBindToService = (container) => (service) => (...types) => {
      types.forEach((t) => {
        container.bind(t).toService(service);
      });
    };
    exports.multiBindToService = multiBindToService;
    var ensureFullyBound = (binding) => {
      let boundValue = null;
      switch (binding.type) {
        case literal_types_1.BindingTypeEnum.ConstantValue:
        case literal_types_1.BindingTypeEnum.Function:
          boundValue = binding.cache;
          break;
        case literal_types_1.BindingTypeEnum.Constructor:
        case literal_types_1.BindingTypeEnum.Instance:
          boundValue = binding.implementationType;
          break;
        case literal_types_1.BindingTypeEnum.DynamicValue:
          boundValue = binding.dynamicValue;
          break;
        case literal_types_1.BindingTypeEnum.Provider:
          boundValue = binding.provider;
          break;
        case literal_types_1.BindingTypeEnum.Factory:
          boundValue = binding.factory;
          break;
      }
      if (boundValue === null) {
        const serviceIdentifierAsString = (0, serialization_1.getServiceIdentifierAsString)(binding.serviceIdentifier);
        throw new Error(`${ERROR_MSGS.INVALID_BINDING_TYPE} ${serviceIdentifierAsString}`);
      }
    };
    exports.ensureFullyBound = ensureFullyBound;
    var getFactoryDetails = (binding) => {
      switch (binding.type) {
        case literal_types_1.BindingTypeEnum.Factory:
          return { factory: binding.factory, factoryType: factory_type_1.FactoryType.Factory };
        case literal_types_1.BindingTypeEnum.Provider:
          return { factory: binding.provider, factoryType: factory_type_1.FactoryType.Provider };
        case literal_types_1.BindingTypeEnum.DynamicValue:
          return {
            factory: binding.dynamicValue,
            factoryType: factory_type_1.FactoryType.DynamicValue
          };
        default:
          throw new Error(`Unexpected factory type ${binding.type}`);
      }
    };
    exports.getFactoryDetails = getFactoryDetails;
  }
});

// ../../../node_modules/inversify/lib/cjs/resolution/instantiation.js
var require_instantiation = __commonJS({
  "../../../node_modules/inversify/lib/cjs/resolution/instantiation.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveInstance = resolveInstance;
    var error_msgs_1 = require_error_msgs();
    var literal_types_1 = require_literal_types();
    var METADATA_KEY = __importStar2(require_metadata_keys());
    var async_1 = require_async();
    function _resolveRequests(childRequests, resolveRequest) {
      return childRequests.reduce((resolvedRequests, childRequest) => {
        const injection = resolveRequest(childRequest);
        const targetType = childRequest.target.type;
        if (targetType === literal_types_1.TargetTypeEnum.ConstructorArgument) {
          resolvedRequests.constructorInjections.push(injection);
        } else {
          resolvedRequests.propertyRequests.push(childRequest);
          resolvedRequests.propertyInjections.push(injection);
        }
        if (!resolvedRequests.isAsync) {
          resolvedRequests.isAsync = (0, async_1.isPromiseOrContainsPromise)(injection);
        }
        return resolvedRequests;
      }, {
        constructorInjections: [],
        isAsync: false,
        propertyInjections: [],
        propertyRequests: []
      });
    }
    function _createInstance(constr, childRequests, resolveRequest) {
      let result;
      if (childRequests.length > 0) {
        const resolved = _resolveRequests(childRequests, resolveRequest);
        const createInstanceWithInjectionsArg = {
          ...resolved,
          constr
        };
        if (resolved.isAsync) {
          result = createInstanceWithInjectionsAsync(createInstanceWithInjectionsArg);
        } else {
          result = createInstanceWithInjections(createInstanceWithInjectionsArg);
        }
      } else {
        result = new constr();
      }
      return result;
    }
    function createInstanceWithInjections(args) {
      const instance = new args.constr(...args.constructorInjections);
      args.propertyRequests.forEach((r, index) => {
        const property = r.target.identifier;
        const injection = args.propertyInjections[index];
        if (!r.target.isOptional() || injection !== void 0) {
          instance[property] = injection;
        }
      });
      return instance;
    }
    async function createInstanceWithInjectionsAsync(args) {
      const constructorInjections = await possiblyWaitInjections(args.constructorInjections);
      const propertyInjections = await possiblyWaitInjections(args.propertyInjections);
      return createInstanceWithInjections({
        ...args,
        constructorInjections,
        propertyInjections
      });
    }
    async function possiblyWaitInjections(possiblePromiseinjections) {
      const injections = [];
      for (const injection of possiblePromiseinjections) {
        if (Array.isArray(injection)) {
          injections.push(Promise.all(injection));
        } else {
          injections.push(injection);
        }
      }
      return Promise.all(injections);
    }
    function _getInstanceAfterPostConstruct(constr, result) {
      const postConstructResult = _postConstruct(constr, result);
      if ((0, async_1.isPromise)(postConstructResult)) {
        return postConstructResult.then(() => result);
      } else {
        return result;
      }
    }
    function _postConstruct(constr, instance) {
      var _a;
      if (Reflect.hasMetadata(METADATA_KEY.POST_CONSTRUCT, constr)) {
        const data = Reflect.getMetadata(METADATA_KEY.POST_CONSTRUCT, constr);
        try {
          return (_a = instance[data.value]) == null ? void 0 : _a.call(instance);
        } catch (e) {
          if (e instanceof Error) {
            throw new Error((0, error_msgs_1.POST_CONSTRUCT_ERROR)(constr.name, e.message));
          }
        }
      }
    }
    function _validateInstanceResolution(binding, constr) {
      if (binding.scope !== literal_types_1.BindingScopeEnum.Singleton) {
        _throwIfHandlingDeactivation(binding, constr);
      }
    }
    function _throwIfHandlingDeactivation(binding, constr) {
      const scopeErrorMessage = `Class cannot be instantiated in ${binding.scope === literal_types_1.BindingScopeEnum.Request ? "request" : "transient"} scope.`;
      if (typeof binding.onDeactivation === "function") {
        throw new Error((0, error_msgs_1.ON_DEACTIVATION_ERROR)(constr.name, scopeErrorMessage));
      }
      if (Reflect.hasMetadata(METADATA_KEY.PRE_DESTROY, constr)) {
        throw new Error((0, error_msgs_1.PRE_DESTROY_ERROR)(constr.name, scopeErrorMessage));
      }
    }
    function resolveInstance(binding, constr, childRequests, resolveRequest) {
      _validateInstanceResolution(binding, constr);
      const result = _createInstance(constr, childRequests, resolveRequest);
      if ((0, async_1.isPromise)(result)) {
        return result.then((resolvedResult) => _getInstanceAfterPostConstruct(constr, resolvedResult));
      } else {
        return _getInstanceAfterPostConstruct(constr, result);
      }
    }
  }
});

// ../../../node_modules/inversify/lib/cjs/resolution/resolver.js
var require_resolver = __commonJS({
  "../../../node_modules/inversify/lib/cjs/resolution/resolver.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolve = resolve;
    var ERROR_MSGS = __importStar2(require_error_msgs());
    var literal_types_1 = require_literal_types();
    var planner_1 = require_planner();
    var scope_1 = require_scope();
    var async_1 = require_async();
    var binding_utils_1 = require_binding_utils();
    var exceptions_1 = require_exceptions();
    var instantiation_1 = require_instantiation();
    var _resolveRequest = (requestScope) => (request) => {
      request.parentContext.setCurrentRequest(request);
      const bindings = request.bindings;
      const childRequests = request.childRequests;
      const targetIsAnArray = request.target && request.target.isArray();
      const targetParentIsNotAnArray = !request.parentRequest || // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, @typescript-eslint/strict-boolean-expressions
      !request.parentRequest.target || // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, @typescript-eslint/strict-boolean-expressions
      !request.target || !request.parentRequest.target.matchesArray(request.target.serviceIdentifier);
      if (targetIsAnArray && targetParentIsNotAnArray) {
        return childRequests.map((childRequest) => {
          const resolveRequest = _resolveRequest(requestScope);
          return resolveRequest(childRequest);
        });
      } else {
        if (request.target.isOptional() && bindings.length === 0) {
          return void 0;
        }
        const binding = bindings[0];
        return _resolveBinding(requestScope, request, binding);
      }
    };
    var _resolveFactoryFromBinding = (binding, context) => {
      const factoryDetails = (0, binding_utils_1.getFactoryDetails)(binding);
      return (0, exceptions_1.tryAndThrowErrorIfStackOverflow)(() => factoryDetails.factory.bind(binding)(context), () => new Error(ERROR_MSGS.CIRCULAR_DEPENDENCY_IN_FACTORY(factoryDetails.factoryType, context.currentRequest.serviceIdentifier.toString())));
    };
    var _getResolvedFromBinding = (requestScope, request, binding) => {
      let result;
      const childRequests = request.childRequests;
      (0, binding_utils_1.ensureFullyBound)(binding);
      switch (binding.type) {
        case literal_types_1.BindingTypeEnum.ConstantValue:
        case literal_types_1.BindingTypeEnum.Function:
          result = binding.cache;
          break;
        case literal_types_1.BindingTypeEnum.Constructor:
          result = binding.implementationType;
          break;
        case literal_types_1.BindingTypeEnum.Instance:
          result = (0, instantiation_1.resolveInstance)(binding, binding.implementationType, childRequests, _resolveRequest(requestScope));
          break;
        default:
          result = _resolveFactoryFromBinding(binding, request.parentContext);
      }
      return result;
    };
    var _resolveInScope = (requestScope, binding, resolveFromBinding) => {
      let result = (0, scope_1.tryGetFromScope)(requestScope, binding);
      if (result !== null) {
        return result;
      }
      result = resolveFromBinding();
      (0, scope_1.saveToScope)(requestScope, binding, result);
      return result;
    };
    var _resolveBinding = (requestScope, request, binding) => {
      return _resolveInScope(requestScope, binding, () => {
        let result = _getResolvedFromBinding(requestScope, request, binding);
        if ((0, async_1.isPromise)(result)) {
          result = result.then((resolved) => _onActivation(request, binding, resolved));
        } else {
          result = _onActivation(request, binding, result);
        }
        return result;
      });
    };
    function _onActivation(request, binding, resolved) {
      let result = _bindingActivation(request.parentContext, binding, resolved);
      const containersIterator = _getContainersIterator(request.parentContext.container);
      let container;
      let containersIteratorResult = containersIterator.next();
      do {
        container = containersIteratorResult.value;
        const context = request.parentContext;
        const serviceIdentifier = request.serviceIdentifier;
        const activationsIterator = _getContainerActivationsForService(container, serviceIdentifier);
        if ((0, async_1.isPromise)(result)) {
          result = _activateContainerAsync(activationsIterator, context, result);
        } else {
          result = _activateContainer(activationsIterator, context, result);
        }
        containersIteratorResult = containersIterator.next();
      } while (containersIteratorResult.done !== true && !(0, planner_1.getBindingDictionary)(container).hasKey(request.serviceIdentifier));
      return result;
    }
    var _bindingActivation = (context, binding, previousResult) => {
      let result;
      if (typeof binding.onActivation === "function") {
        result = binding.onActivation(context, previousResult);
      } else {
        result = previousResult;
      }
      return result;
    };
    var _activateContainer = (activationsIterator, context, result) => {
      let activation = activationsIterator.next();
      while (activation.done !== true) {
        result = activation.value(context, result);
        if ((0, async_1.isPromise)(result)) {
          return _activateContainerAsync(activationsIterator, context, result);
        }
        activation = activationsIterator.next();
      }
      return result;
    };
    var _activateContainerAsync = async (activationsIterator, context, resultPromise) => {
      let result = await resultPromise;
      let activation = activationsIterator.next();
      while (activation.done !== true) {
        result = await activation.value(context, result);
        activation = activationsIterator.next();
      }
      return result;
    };
    var _getContainerActivationsForService = (container, serviceIdentifier) => {
      const activations = container._activations;
      return activations.hasKey(serviceIdentifier) ? activations.get(serviceIdentifier).values() : [].values();
    };
    var _getContainersIterator = (container) => {
      const containersStack = [container];
      let parent = container.parent;
      while (parent !== null) {
        containersStack.push(parent);
        parent = parent.parent;
      }
      const getNextContainer = () => {
        const nextContainer = containersStack.pop();
        if (nextContainer !== void 0) {
          return { done: false, value: nextContainer };
        } else {
          return { done: true, value: void 0 };
        }
      };
      const containersIterator = {
        next: getNextContainer
      };
      return containersIterator;
    };
    function resolve(context) {
      const resolveRequestFunction = _resolveRequest(context.plan.rootRequest.requestScope);
      return resolveRequestFunction(context.plan.rootRequest);
    }
  }
});

// ../../../node_modules/inversify/lib/cjs/syntax/constraint_helpers.js
var require_constraint_helpers = __commonJS({
  "../../../node_modules/inversify/lib/cjs/syntax/constraint_helpers.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.typeConstraint = exports.namedConstraint = exports.taggedConstraint = exports.traverseAncerstors = void 0;
    var METADATA_KEY = __importStar2(require_metadata_keys());
    var metadata_1 = require_metadata();
    var traverseAncerstors = (request, constraint) => {
      const parent = request.parentRequest;
      if (parent !== null) {
        return constraint(parent) ? true : traverseAncerstors(parent, constraint);
      } else {
        return false;
      }
    };
    exports.traverseAncerstors = traverseAncerstors;
    var taggedConstraint = (key) => (value) => {
      const constraint = (request) => request !== null && // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
      request.target !== null && request.target.matchesTag(key)(value);
      constraint.metaData = new metadata_1.Metadata(key, value);
      return constraint;
    };
    exports.taggedConstraint = taggedConstraint;
    var namedConstraint = taggedConstraint(METADATA_KEY.NAMED_TAG);
    exports.namedConstraint = namedConstraint;
    var typeConstraint = (type) => (request) => {
      let binding = null;
      if (request !== null) {
        binding = request.bindings[0];
        if (typeof type === "string") {
          return binding.serviceIdentifier === type;
        } else {
          const constructor = request.bindings[0].implementationType;
          return type === constructor;
        }
      }
      return false;
    };
    exports.typeConstraint = typeConstraint;
  }
});

// ../../../node_modules/inversify/lib/cjs/syntax/binding_when_syntax.js
var require_binding_when_syntax = __commonJS({
  "../../../node_modules/inversify/lib/cjs/syntax/binding_when_syntax.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingWhenSyntax = void 0;
    var binding_on_syntax_1 = require_binding_on_syntax();
    var constraint_helpers_1 = require_constraint_helpers();
    var BindingWhenSyntax = class {
      constructor(binding) {
        __publicField(this, "_binding");
        this._binding = binding;
      }
      when(constraint) {
        this._binding.constraint = constraint;
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenTargetNamed(name) {
        this._binding.constraint = (0, constraint_helpers_1.namedConstraint)(name);
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenTargetIsDefault() {
        this._binding.constraint = (request) => {
          if (request === null) {
            return false;
          }
          const targetIsDefault = (
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
            request.target !== null && !request.target.isNamed() && !request.target.isTagged()
          );
          return targetIsDefault;
        };
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenTargetTagged(tag, value) {
        this._binding.constraint = (0, constraint_helpers_1.taggedConstraint)(tag)(value);
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenInjectedInto(parent) {
        this._binding.constraint = (request) => request !== null && (0, constraint_helpers_1.typeConstraint)(parent)(request.parentRequest);
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenParentNamed(name) {
        this._binding.constraint = (request) => request !== null && (0, constraint_helpers_1.namedConstraint)(name)(request.parentRequest);
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenParentTagged(tag, value) {
        this._binding.constraint = (request) => request !== null && (0, constraint_helpers_1.taggedConstraint)(tag)(value)(request.parentRequest);
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenAnyAncestorIs(ancestor) {
        this._binding.constraint = (request) => request !== null && (0, constraint_helpers_1.traverseAncerstors)(request, (0, constraint_helpers_1.typeConstraint)(ancestor));
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenNoAncestorIs(ancestor) {
        this._binding.constraint = (request) => request !== null && !(0, constraint_helpers_1.traverseAncerstors)(request, (0, constraint_helpers_1.typeConstraint)(ancestor));
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenAnyAncestorNamed(name) {
        this._binding.constraint = (request) => request !== null && (0, constraint_helpers_1.traverseAncerstors)(request, (0, constraint_helpers_1.namedConstraint)(name));
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenNoAncestorNamed(name) {
        this._binding.constraint = (request) => request !== null && !(0, constraint_helpers_1.traverseAncerstors)(request, (0, constraint_helpers_1.namedConstraint)(name));
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenAnyAncestorTagged(tag, value) {
        this._binding.constraint = (request) => request !== null && (0, constraint_helpers_1.traverseAncerstors)(request, (0, constraint_helpers_1.taggedConstraint)(tag)(value));
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenNoAncestorTagged(tag, value) {
        this._binding.constraint = (request) => request !== null && !(0, constraint_helpers_1.traverseAncerstors)(request, (0, constraint_helpers_1.taggedConstraint)(tag)(value));
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenAnyAncestorMatches(constraint) {
        this._binding.constraint = (request) => request !== null && (0, constraint_helpers_1.traverseAncerstors)(request, constraint);
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenNoAncestorMatches(constraint) {
        this._binding.constraint = (request) => request !== null && !(0, constraint_helpers_1.traverseAncerstors)(request, constraint);
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
    };
    exports.BindingWhenSyntax = BindingWhenSyntax;
  }
});

// ../../../node_modules/inversify/lib/cjs/syntax/binding_on_syntax.js
var require_binding_on_syntax = __commonJS({
  "../../../node_modules/inversify/lib/cjs/syntax/binding_on_syntax.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingOnSyntax = void 0;
    var binding_when_syntax_1 = require_binding_when_syntax();
    var BindingOnSyntax = class {
      constructor(binding) {
        __publicField(this, "_binding");
        this._binding = binding;
      }
      onActivation(handler) {
        this._binding.onActivation = handler;
        return new binding_when_syntax_1.BindingWhenSyntax(this._binding);
      }
      onDeactivation(handler) {
        this._binding.onDeactivation = handler;
        return new binding_when_syntax_1.BindingWhenSyntax(this._binding);
      }
    };
    exports.BindingOnSyntax = BindingOnSyntax;
  }
});

// ../../../node_modules/inversify/lib/cjs/syntax/binding_when_on_syntax.js
var require_binding_when_on_syntax = __commonJS({
  "../../../node_modules/inversify/lib/cjs/syntax/binding_when_on_syntax.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingWhenOnSyntax = void 0;
    var binding_on_syntax_1 = require_binding_on_syntax();
    var binding_when_syntax_1 = require_binding_when_syntax();
    var BindingWhenOnSyntax = class {
      constructor(binding) {
        __publicField(this, "_bindingWhenSyntax");
        __publicField(this, "_bindingOnSyntax");
        __publicField(this, "_binding");
        this._binding = binding;
        this._bindingWhenSyntax = new binding_when_syntax_1.BindingWhenSyntax(this._binding);
        this._bindingOnSyntax = new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      when(constraint) {
        return this._bindingWhenSyntax.when(constraint);
      }
      whenTargetNamed(name) {
        return this._bindingWhenSyntax.whenTargetNamed(name);
      }
      whenTargetIsDefault() {
        return this._bindingWhenSyntax.whenTargetIsDefault();
      }
      whenTargetTagged(tag, value) {
        return this._bindingWhenSyntax.whenTargetTagged(tag, value);
      }
      whenInjectedInto(parent) {
        return this._bindingWhenSyntax.whenInjectedInto(parent);
      }
      whenParentNamed(name) {
        return this._bindingWhenSyntax.whenParentNamed(name);
      }
      whenParentTagged(tag, value) {
        return this._bindingWhenSyntax.whenParentTagged(tag, value);
      }
      whenAnyAncestorIs(ancestor) {
        return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);
      }
      whenNoAncestorIs(ancestor) {
        return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);
      }
      whenAnyAncestorNamed(name) {
        return this._bindingWhenSyntax.whenAnyAncestorNamed(name);
      }
      whenAnyAncestorTagged(tag, value) {
        return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);
      }
      whenNoAncestorNamed(name) {
        return this._bindingWhenSyntax.whenNoAncestorNamed(name);
      }
      whenNoAncestorTagged(tag, value) {
        return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);
      }
      whenAnyAncestorMatches(constraint) {
        return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);
      }
      whenNoAncestorMatches(constraint) {
        return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);
      }
      onActivation(handler) {
        return this._bindingOnSyntax.onActivation(handler);
      }
      onDeactivation(handler) {
        return this._bindingOnSyntax.onDeactivation(handler);
      }
    };
    exports.BindingWhenOnSyntax = BindingWhenOnSyntax;
  }
});

// ../../../node_modules/inversify/lib/cjs/syntax/binding_in_syntax.js
var require_binding_in_syntax = __commonJS({
  "../../../node_modules/inversify/lib/cjs/syntax/binding_in_syntax.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingInSyntax = void 0;
    var literal_types_1 = require_literal_types();
    var binding_when_on_syntax_1 = require_binding_when_on_syntax();
    var BindingInSyntax = class {
      constructor(binding) {
        __publicField(this, "_binding");
        this._binding = binding;
      }
      inRequestScope() {
        this._binding.scope = literal_types_1.BindingScopeEnum.Request;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
      }
      inSingletonScope() {
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
      }
      inTransientScope() {
        this._binding.scope = literal_types_1.BindingScopeEnum.Transient;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
      }
    };
    exports.BindingInSyntax = BindingInSyntax;
  }
});

// ../../../node_modules/inversify/lib/cjs/syntax/binding_in_when_on_syntax.js
var require_binding_in_when_on_syntax = __commonJS({
  "../../../node_modules/inversify/lib/cjs/syntax/binding_in_when_on_syntax.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingInWhenOnSyntax = void 0;
    var binding_in_syntax_1 = require_binding_in_syntax();
    var binding_on_syntax_1 = require_binding_on_syntax();
    var binding_when_syntax_1 = require_binding_when_syntax();
    var BindingInWhenOnSyntax = class {
      constructor(binding) {
        __publicField(this, "_bindingInSyntax");
        __publicField(this, "_bindingWhenSyntax");
        __publicField(this, "_bindingOnSyntax");
        __publicField(this, "_binding");
        this._binding = binding;
        this._bindingWhenSyntax = new binding_when_syntax_1.BindingWhenSyntax(this._binding);
        this._bindingOnSyntax = new binding_on_syntax_1.BindingOnSyntax(this._binding);
        this._bindingInSyntax = new binding_in_syntax_1.BindingInSyntax(binding);
      }
      inRequestScope() {
        return this._bindingInSyntax.inRequestScope();
      }
      inSingletonScope() {
        return this._bindingInSyntax.inSingletonScope();
      }
      inTransientScope() {
        return this._bindingInSyntax.inTransientScope();
      }
      when(constraint) {
        return this._bindingWhenSyntax.when(constraint);
      }
      whenTargetNamed(name) {
        return this._bindingWhenSyntax.whenTargetNamed(name);
      }
      whenTargetIsDefault() {
        return this._bindingWhenSyntax.whenTargetIsDefault();
      }
      whenTargetTagged(tag, value) {
        return this._bindingWhenSyntax.whenTargetTagged(tag, value);
      }
      whenInjectedInto(parent) {
        return this._bindingWhenSyntax.whenInjectedInto(parent);
      }
      whenParentNamed(name) {
        return this._bindingWhenSyntax.whenParentNamed(name);
      }
      whenParentTagged(tag, value) {
        return this._bindingWhenSyntax.whenParentTagged(tag, value);
      }
      whenAnyAncestorIs(ancestor) {
        return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);
      }
      whenNoAncestorIs(ancestor) {
        return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);
      }
      whenAnyAncestorNamed(name) {
        return this._bindingWhenSyntax.whenAnyAncestorNamed(name);
      }
      whenAnyAncestorTagged(tag, value) {
        return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);
      }
      whenNoAncestorNamed(name) {
        return this._bindingWhenSyntax.whenNoAncestorNamed(name);
      }
      whenNoAncestorTagged(tag, value) {
        return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);
      }
      whenAnyAncestorMatches(constraint) {
        return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);
      }
      whenNoAncestorMatches(constraint) {
        return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);
      }
      onActivation(handler) {
        return this._bindingOnSyntax.onActivation(handler);
      }
      onDeactivation(handler) {
        return this._bindingOnSyntax.onDeactivation(handler);
      }
    };
    exports.BindingInWhenOnSyntax = BindingInWhenOnSyntax;
  }
});

// ../../../node_modules/inversify/lib/cjs/syntax/binding_to_syntax.js
var require_binding_to_syntax = __commonJS({
  "../../../node_modules/inversify/lib/cjs/syntax/binding_to_syntax.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingToSyntax = void 0;
    var ERROR_MSGS = __importStar2(require_error_msgs());
    var literal_types_1 = require_literal_types();
    var binding_in_when_on_syntax_1 = require_binding_in_when_on_syntax();
    var binding_when_on_syntax_1 = require_binding_when_on_syntax();
    var BindingToSyntax = class {
      constructor(binding) {
        // TODO: Implement an internal type `_BindingToSyntax<T>` wherein this member
        // can be public. Let `BindingToSyntax<T>` be the presentational type that
        // depends on it, and does not expose this member as public.
        __publicField(this, "_binding");
        this._binding = binding;
      }
      to(constructor) {
        this._binding.type = literal_types_1.BindingTypeEnum.Instance;
        this._binding.implementationType = constructor;
        return new binding_in_when_on_syntax_1.BindingInWhenOnSyntax(this._binding);
      }
      toSelf() {
        if (typeof this._binding.serviceIdentifier !== "function") {
          throw new Error(ERROR_MSGS.INVALID_TO_SELF_VALUE);
        }
        const self2 = this._binding.serviceIdentifier;
        return this.to(self2);
      }
      toConstantValue(value) {
        this._binding.type = literal_types_1.BindingTypeEnum.ConstantValue;
        this._binding.cache = value;
        this._binding.dynamicValue = null;
        this._binding.implementationType = null;
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
      }
      toDynamicValue(func) {
        this._binding.type = literal_types_1.BindingTypeEnum.DynamicValue;
        this._binding.cache = null;
        this._binding.dynamicValue = func;
        this._binding.implementationType = null;
        return new binding_in_when_on_syntax_1.BindingInWhenOnSyntax(this._binding);
      }
      toConstructor(constructor) {
        this._binding.type = literal_types_1.BindingTypeEnum.Constructor;
        this._binding.implementationType = constructor;
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
      }
      toFactory(factory) {
        this._binding.type = literal_types_1.BindingTypeEnum.Factory;
        this._binding.factory = factory;
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
      }
      toFunction(func) {
        if (typeof func !== "function") {
          throw new Error(ERROR_MSGS.INVALID_FUNCTION_BINDING);
        }
        const bindingWhenOnSyntax = this.toConstantValue(func);
        this._binding.type = literal_types_1.BindingTypeEnum.Function;
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return bindingWhenOnSyntax;
      }
      toAutoFactory(serviceIdentifier) {
        this._binding.type = literal_types_1.BindingTypeEnum.Factory;
        this._binding.factory = (context) => {
          const autofactory = () => context.container.get(serviceIdentifier);
          return autofactory;
        };
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
      }
      toAutoNamedFactory(serviceIdentifier) {
        this._binding.type = literal_types_1.BindingTypeEnum.Factory;
        this._binding.factory = (context) => {
          return (named) => context.container.getNamed(serviceIdentifier, named);
        };
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
      }
      toProvider(provider) {
        this._binding.type = literal_types_1.BindingTypeEnum.Provider;
        this._binding.provider = provider;
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
      }
      toService(service) {
        this._binding.type = literal_types_1.BindingTypeEnum.DynamicValue;
        Object.defineProperty(this._binding, "cache", {
          configurable: true,
          enumerable: true,
          get() {
            return null;
          },
          set(_value) {
          }
        });
        this._binding.dynamicValue = (context) => {
          try {
            return context.container.get(service);
          } catch (_error) {
            return context.container.getAsync(service);
          }
        };
        this._binding.implementationType = null;
      }
    };
    exports.BindingToSyntax = BindingToSyntax;
  }
});

// ../../../node_modules/inversify/lib/cjs/container/container_snapshot.js
var require_container_snapshot = __commonJS({
  "../../../node_modules/inversify/lib/cjs/container/container_snapshot.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContainerSnapshot = void 0;
    var ContainerSnapshot = class _ContainerSnapshot {
      constructor() {
        __publicField(this, "bindings");
        __publicField(this, "activations");
        __publicField(this, "deactivations");
        __publicField(this, "middleware");
        __publicField(this, "moduleActivationStore");
      }
      static of(bindings, middleware, activations, deactivations, moduleActivationStore) {
        const snapshot = new _ContainerSnapshot();
        snapshot.bindings = bindings;
        snapshot.middleware = middleware;
        snapshot.deactivations = deactivations;
        snapshot.activations = activations;
        snapshot.moduleActivationStore = moduleActivationStore;
        return snapshot;
      }
    };
    exports.ContainerSnapshot = ContainerSnapshot;
  }
});

// ../../../node_modules/inversify/lib/cjs/utils/clonable.js
var require_clonable = __commonJS({
  "../../../node_modules/inversify/lib/cjs/utils/clonable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isClonable = isClonable;
    function isClonable(obj) {
      return typeof obj === "object" && obj !== null && "clone" in obj && typeof obj.clone === "function";
    }
  }
});

// ../../../node_modules/inversify/lib/cjs/container/lookup.js
var require_lookup = __commonJS({
  "../../../node_modules/inversify/lib/cjs/container/lookup.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Lookup = void 0;
    var ERROR_MSGS = __importStar2(require_error_msgs());
    var clonable_1 = require_clonable();
    var Lookup = class _Lookup {
      constructor() {
        // dictionary used store multiple values for each key <key>
        __publicField(this, "_map");
        this._map = /* @__PURE__ */ new Map();
      }
      getMap() {
        return this._map;
      }
      // adds a new entry to _map
      add(serviceIdentifier, value) {
        this._checkNonNulish(serviceIdentifier);
        if (value === null || value === void 0) {
          throw new Error(ERROR_MSGS.NULL_ARGUMENT);
        }
        const entry = this._map.get(serviceIdentifier);
        if (entry !== void 0) {
          entry.push(value);
        } else {
          this._map.set(serviceIdentifier, [value]);
        }
      }
      // gets the value of a entry by its key (serviceIdentifier)
      get(serviceIdentifier) {
        this._checkNonNulish(serviceIdentifier);
        const entry = this._map.get(serviceIdentifier);
        if (entry !== void 0) {
          return entry;
        } else {
          throw new Error(ERROR_MSGS.KEY_NOT_FOUND);
        }
      }
      // removes a entry from _map by its key (serviceIdentifier)
      remove(serviceIdentifier) {
        this._checkNonNulish(serviceIdentifier);
        if (!this._map.delete(serviceIdentifier)) {
          throw new Error(ERROR_MSGS.KEY_NOT_FOUND);
        }
      }
      removeIntersection(lookup) {
        this.traverse((serviceIdentifier, value) => {
          const lookupActivations = lookup.hasKey(serviceIdentifier) ? lookup.get(serviceIdentifier) : void 0;
          if (lookupActivations !== void 0) {
            const filteredValues = value.filter((lookupValue) => !lookupActivations.some((moduleActivation) => lookupValue === moduleActivation));
            this._setValue(serviceIdentifier, filteredValues);
          }
        });
      }
      removeByCondition(condition) {
        const removals = [];
        this._map.forEach((entries, key) => {
          const updatedEntries = [];
          for (const entry of entries) {
            const remove = condition(entry);
            if (remove) {
              removals.push(entry);
            } else {
              updatedEntries.push(entry);
            }
          }
          this._setValue(key, updatedEntries);
        });
        return removals;
      }
      // returns true if _map contains a key (serviceIdentifier)
      hasKey(serviceIdentifier) {
        this._checkNonNulish(serviceIdentifier);
        return this._map.has(serviceIdentifier);
      }
      // returns a new Lookup instance; note: this is not a deep clone, only Lookup related data structure (dictionary) is
      // cloned, content remains the same
      clone() {
        const copy = new _Lookup();
        this._map.forEach((value, key) => {
          value.forEach((b) => {
            copy.add(key, (0, clonable_1.isClonable)(b) ? b.clone() : b);
          });
        });
        return copy;
      }
      traverse(func) {
        this._map.forEach((value, key) => {
          func(key, value);
        });
      }
      _checkNonNulish(value) {
        if (value == null) {
          throw new Error(ERROR_MSGS.NULL_ARGUMENT);
        }
      }
      _setValue(serviceIdentifier, value) {
        if (value.length > 0) {
          this._map.set(serviceIdentifier, value);
        } else {
          this._map.delete(serviceIdentifier);
        }
      }
    };
    exports.Lookup = Lookup;
  }
});

// ../../../node_modules/inversify/lib/cjs/container/module_activation_store.js
var require_module_activation_store = __commonJS({
  "../../../node_modules/inversify/lib/cjs/container/module_activation_store.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModuleActivationStore = void 0;
    var lookup_1 = require_lookup();
    var ModuleActivationStore = class _ModuleActivationStore {
      constructor() {
        __publicField(this, "_map", /* @__PURE__ */ new Map());
      }
      remove(moduleId) {
        const handlers = this._map.get(moduleId);
        if (handlers === void 0) {
          return this._getEmptyHandlersStore();
        }
        this._map.delete(moduleId);
        return handlers;
      }
      addDeactivation(moduleId, serviceIdentifier, onDeactivation) {
        this._getModuleActivationHandlers(moduleId).onDeactivations.add(serviceIdentifier, onDeactivation);
      }
      addActivation(moduleId, serviceIdentifier, onActivation) {
        this._getModuleActivationHandlers(moduleId).onActivations.add(serviceIdentifier, onActivation);
      }
      clone() {
        const clone = new _ModuleActivationStore();
        this._map.forEach((handlersStore, moduleId) => {
          clone._map.set(moduleId, {
            onActivations: handlersStore.onActivations.clone(),
            onDeactivations: handlersStore.onDeactivations.clone()
          });
        });
        return clone;
      }
      _getModuleActivationHandlers(moduleId) {
        let moduleActivationHandlers = this._map.get(moduleId);
        if (moduleActivationHandlers === void 0) {
          moduleActivationHandlers = this._getEmptyHandlersStore();
          this._map.set(moduleId, moduleActivationHandlers);
        }
        return moduleActivationHandlers;
      }
      _getEmptyHandlersStore() {
        const handlersStore = {
          onActivations: new lookup_1.Lookup(),
          onDeactivations: new lookup_1.Lookup()
        };
        return handlersStore;
      }
    };
    exports.ModuleActivationStore = ModuleActivationStore;
  }
});

// ../../../node_modules/inversify/lib/cjs/container/container.js
var require_container = __commonJS({
  "../../../node_modules/inversify/lib/cjs/container/container.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Container = void 0;
    var binding_1 = require_binding();
    var ERROR_MSGS = __importStar2(require_error_msgs());
    var literal_types_1 = require_literal_types();
    var METADATA_KEY = __importStar2(require_metadata_keys());
    var metadata_reader_1 = require_metadata_reader();
    var planner_1 = require_planner();
    var resolver_1 = require_resolver();
    var binding_to_syntax_1 = require_binding_to_syntax();
    var async_1 = require_async();
    var id_1 = require_id();
    var serialization_1 = require_serialization();
    var container_snapshot_1 = require_container_snapshot();
    var lookup_1 = require_lookup();
    var module_activation_store_1 = require_module_activation_store();
    var Container = class _Container {
      constructor(containerOptions) {
        __publicField(this, "id");
        __publicField(this, "parent");
        __publicField(this, "options");
        __publicField(this, "_middleware");
        __publicField(this, "_bindingDictionary");
        __publicField(this, "_activations");
        __publicField(this, "_deactivations");
        __publicField(this, "_snapshots");
        __publicField(this, "_metadataReader");
        __publicField(this, "_moduleActivationStore");
        const options = containerOptions || {};
        if (typeof options !== "object") {
          throw new Error(ERROR_MSGS.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT);
        }
        if (options.defaultScope === void 0) {
          options.defaultScope = literal_types_1.BindingScopeEnum.Transient;
        } else if (options.defaultScope !== literal_types_1.BindingScopeEnum.Singleton && options.defaultScope !== literal_types_1.BindingScopeEnum.Transient && options.defaultScope !== literal_types_1.BindingScopeEnum.Request) {
          throw new Error(ERROR_MSGS.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE);
        }
        if (options.autoBindInjectable === void 0) {
          options.autoBindInjectable = false;
        } else if (typeof options.autoBindInjectable !== "boolean") {
          throw new Error(ERROR_MSGS.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE);
        }
        if (options.skipBaseClassChecks === void 0) {
          options.skipBaseClassChecks = false;
        } else if (typeof options.skipBaseClassChecks !== "boolean") {
          throw new Error(ERROR_MSGS.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK);
        }
        this.options = {
          autoBindInjectable: options.autoBindInjectable,
          defaultScope: options.defaultScope,
          skipBaseClassChecks: options.skipBaseClassChecks
        };
        this.id = (0, id_1.id)();
        this._bindingDictionary = new lookup_1.Lookup();
        this._snapshots = [];
        this._middleware = null;
        this._activations = new lookup_1.Lookup();
        this._deactivations = new lookup_1.Lookup();
        this.parent = null;
        this._metadataReader = new metadata_reader_1.MetadataReader();
        this._moduleActivationStore = new module_activation_store_1.ModuleActivationStore();
      }
      static merge(container1, container2, ...containers) {
        const container = new _Container();
        const targetContainers = [
          container1,
          container2,
          ...containers
        ].map((targetContainer) => (0, planner_1.getBindingDictionary)(targetContainer));
        const bindingDictionary = (0, planner_1.getBindingDictionary)(container);
        function copyDictionary(origin, destination) {
          origin.traverse((_key, value) => {
            value.forEach((binding) => {
              destination.add(binding.serviceIdentifier, binding.clone());
            });
          });
        }
        targetContainers.forEach((targetBindingDictionary) => {
          copyDictionary(targetBindingDictionary, bindingDictionary);
        });
        return container;
      }
      load(...modules) {
        const getHelpers = this._getContainerModuleHelpersFactory();
        for (const currentModule of modules) {
          const containerModuleHelpers = getHelpers(currentModule.id);
          currentModule.registry(containerModuleHelpers.bindFunction, containerModuleHelpers.unbindFunction, containerModuleHelpers.isboundFunction, containerModuleHelpers.rebindFunction, containerModuleHelpers.unbindAsyncFunction, containerModuleHelpers.onActivationFunction, containerModuleHelpers.onDeactivationFunction);
        }
      }
      async loadAsync(...modules) {
        const getHelpers = this._getContainerModuleHelpersFactory();
        for (const currentModule of modules) {
          const containerModuleHelpers = getHelpers(currentModule.id);
          await currentModule.registry(containerModuleHelpers.bindFunction, containerModuleHelpers.unbindFunction, containerModuleHelpers.isboundFunction, containerModuleHelpers.rebindFunction, containerModuleHelpers.unbindAsyncFunction, containerModuleHelpers.onActivationFunction, containerModuleHelpers.onDeactivationFunction);
        }
      }
      unload(...modules) {
        modules.forEach((module2) => {
          const deactivations = this._removeModuleBindings(module2.id);
          this._deactivateSingletons(deactivations);
          this._removeModuleHandlers(module2.id);
        });
      }
      async unloadAsync(...modules) {
        for (const module2 of modules) {
          const deactivations = this._removeModuleBindings(module2.id);
          await this._deactivateSingletonsAsync(deactivations);
          this._removeModuleHandlers(module2.id);
        }
      }
      // Registers a type binding
      bind(serviceIdentifier) {
        return this._bind(this._buildBinding(serviceIdentifier));
      }
      rebind(serviceIdentifier) {
        this.unbind(serviceIdentifier);
        return this.bind(serviceIdentifier);
      }
      async rebindAsync(serviceIdentifier) {
        await this.unbindAsync(serviceIdentifier);
        return this.bind(serviceIdentifier);
      }
      // Removes a type binding from the registry by its key
      unbind(serviceIdentifier) {
        if (this._bindingDictionary.hasKey(serviceIdentifier)) {
          const bindings = this._bindingDictionary.get(serviceIdentifier);
          this._deactivateSingletons(bindings);
        }
        this._removeServiceFromDictionary(serviceIdentifier);
      }
      async unbindAsync(serviceIdentifier) {
        if (this._bindingDictionary.hasKey(serviceIdentifier)) {
          const bindings = this._bindingDictionary.get(serviceIdentifier);
          await this._deactivateSingletonsAsync(bindings);
        }
        this._removeServiceFromDictionary(serviceIdentifier);
      }
      // Removes all the type bindings from the registry
      unbindAll() {
        this._bindingDictionary.traverse((_key, value) => {
          this._deactivateSingletons(value);
        });
        this._bindingDictionary = new lookup_1.Lookup();
      }
      async unbindAllAsync() {
        const promises = [];
        this._bindingDictionary.traverse((_key, value) => {
          promises.push(this._deactivateSingletonsAsync(value));
        });
        await Promise.all(promises);
        this._bindingDictionary = new lookup_1.Lookup();
      }
      onActivation(serviceIdentifier, onActivation) {
        this._activations.add(serviceIdentifier, onActivation);
      }
      onDeactivation(serviceIdentifier, onDeactivation) {
        this._deactivations.add(serviceIdentifier, onDeactivation);
      }
      // Allows to check if there are bindings available for serviceIdentifier
      isBound(serviceIdentifier) {
        let bound = this._bindingDictionary.hasKey(serviceIdentifier);
        if (!bound && this.parent) {
          bound = this.parent.isBound(serviceIdentifier);
        }
        return bound;
      }
      // check binding dependency only in current container
      isCurrentBound(serviceIdentifier) {
        return this._bindingDictionary.hasKey(serviceIdentifier);
      }
      isBoundNamed(serviceIdentifier, named) {
        return this.isBoundTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
      }
      // Check if a binding with a complex constraint is available without throwing a error. Ancestors are also verified.
      isBoundTagged(serviceIdentifier, key, value) {
        let bound = false;
        if (this._bindingDictionary.hasKey(serviceIdentifier)) {
          const bindings = this._bindingDictionary.get(serviceIdentifier);
          const request = (0, planner_1.createMockRequest)(this, serviceIdentifier, {
            customTag: {
              key,
              value
            },
            isMultiInject: false
          });
          bound = bindings.some((b) => b.constraint(request));
        }
        if (!bound && this.parent) {
          bound = this.parent.isBoundTagged(serviceIdentifier, key, value);
        }
        return bound;
      }
      snapshot() {
        this._snapshots.push(container_snapshot_1.ContainerSnapshot.of(this._bindingDictionary.clone(), this._middleware, this._activations.clone(), this._deactivations.clone(), this._moduleActivationStore.clone()));
      }
      restore() {
        const snapshot = this._snapshots.pop();
        if (snapshot === void 0) {
          throw new Error(ERROR_MSGS.NO_MORE_SNAPSHOTS_AVAILABLE);
        }
        this._bindingDictionary = snapshot.bindings;
        this._activations = snapshot.activations;
        this._deactivations = snapshot.deactivations;
        this._middleware = snapshot.middleware;
        this._moduleActivationStore = snapshot.moduleActivationStore;
      }
      createChild(containerOptions) {
        const child = new _Container(containerOptions || this.options);
        child.parent = this;
        return child;
      }
      applyMiddleware(...middlewares) {
        const initial = this._middleware ? this._middleware : this._planAndResolve();
        this._middleware = middlewares.reduce((prev, curr) => curr(prev), initial);
      }
      applyCustomMetadataReader(metadataReader) {
        this._metadataReader = metadataReader;
      }
      // Resolves a dependency by its runtime identifier
      // The runtime identifier must be associated with only one binding
      // use getAll when the runtime identifier is associated with multiple bindings
      get(serviceIdentifier) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, false, false);
        return this._getButThrowIfAsync(getArgs);
      }
      async getAsync(serviceIdentifier) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, false, false);
        return this._get(getArgs);
      }
      getTagged(serviceIdentifier, key, value) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, false, false, key, value);
        return this._getButThrowIfAsync(getArgs);
      }
      async getTaggedAsync(serviceIdentifier, key, value) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, false, false, key, value);
        return this._get(getArgs);
      }
      getNamed(serviceIdentifier, named) {
        return this.getTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
      }
      async getNamedAsync(serviceIdentifier, named) {
        return this.getTaggedAsync(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
      }
      // Resolves a dependency by its runtime identifier
      // The runtime identifier can be associated with one or multiple bindings
      getAll(serviceIdentifier, options) {
        const getArgs = this._getAllArgs(serviceIdentifier, options, false);
        return this._getButThrowIfAsync(getArgs);
      }
      async getAllAsync(serviceIdentifier, options) {
        const getArgs = this._getAllArgs(serviceIdentifier, options, false);
        return this._getAll(getArgs);
      }
      getAllTagged(serviceIdentifier, key, value) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, true, false, key, value);
        return this._getButThrowIfAsync(getArgs);
      }
      async getAllTaggedAsync(serviceIdentifier, key, value) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, true, false, key, value);
        return this._getAll(getArgs);
      }
      getAllNamed(serviceIdentifier, named) {
        return this.getAllTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
      }
      async getAllNamedAsync(serviceIdentifier, named) {
        return this.getAllTaggedAsync(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
      }
      resolve(constructorFunction) {
        const isBound = this.isBound(constructorFunction);
        if (!isBound) {
          this.bind(constructorFunction).toSelf();
        }
        const resolved = this.get(constructorFunction);
        if (!isBound) {
          this.unbind(constructorFunction);
        }
        return resolved;
      }
      tryGet(serviceIdentifier) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, false, true);
        return this._getButThrowIfAsync(getArgs);
      }
      async tryGetAsync(serviceIdentifier) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, false, true);
        return this._get(getArgs);
      }
      tryGetTagged(serviceIdentifier, key, value) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, false, true, key, value);
        return this._getButThrowIfAsync(getArgs);
      }
      async tryGetTaggedAsync(serviceIdentifier, key, value) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, false, true, key, value);
        return this._get(getArgs);
      }
      tryGetNamed(serviceIdentifier, named) {
        return this.tryGetTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
      }
      async tryGetNamedAsync(serviceIdentifier, named) {
        return this.tryGetTaggedAsync(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
      }
      tryGetAll(serviceIdentifier, options) {
        const getArgs = this._getAllArgs(serviceIdentifier, options, true);
        return this._getButThrowIfAsync(getArgs);
      }
      async tryGetAllAsync(serviceIdentifier, options) {
        const getArgs = this._getAllArgs(serviceIdentifier, options, true);
        return this._getAll(getArgs);
      }
      tryGetAllTagged(serviceIdentifier, key, value) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, true, true, key, value);
        return this._getButThrowIfAsync(getArgs);
      }
      async tryGetAllTaggedAsync(serviceIdentifier, key, value) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, true, true, key, value);
        return this._getAll(getArgs);
      }
      tryGetAllNamed(serviceIdentifier, named) {
        return this.tryGetAllTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
      }
      async tryGetAllNamedAsync(serviceIdentifier, named) {
        return this.tryGetAllTaggedAsync(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
      }
      _preDestroy(constructor, instance) {
        var _a;
        if (constructor !== void 0 && Reflect.hasMetadata(METADATA_KEY.PRE_DESTROY, constructor)) {
          const data = Reflect.getMetadata(METADATA_KEY.PRE_DESTROY, constructor);
          return (_a = instance[data.value]) == null ? void 0 : _a.call(instance);
        }
      }
      _removeModuleHandlers(moduleId) {
        const moduleActivationsHandlers = this._moduleActivationStore.remove(moduleId);
        this._activations.removeIntersection(moduleActivationsHandlers.onActivations);
        this._deactivations.removeIntersection(moduleActivationsHandlers.onDeactivations);
      }
      _removeModuleBindings(moduleId) {
        return this._bindingDictionary.removeByCondition((binding) => binding.moduleId === moduleId);
      }
      _deactivate(binding, instance) {
        const constructor = instance == void 0 ? void 0 : (
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          Object.getPrototypeOf(instance).constructor
        );
        try {
          if (this._deactivations.hasKey(binding.serviceIdentifier)) {
            const result = this._deactivateContainer(instance, this._deactivations.get(binding.serviceIdentifier).values());
            if ((0, async_1.isPromise)(result)) {
              return this._handleDeactivationError(result.then(async () => this._propagateContainerDeactivationThenBindingAndPreDestroyAsync(binding, instance, constructor)), binding.serviceIdentifier);
            }
          }
          const propagateDeactivationResult = this._propagateContainerDeactivationThenBindingAndPreDestroy(binding, instance, constructor);
          if ((0, async_1.isPromise)(propagateDeactivationResult)) {
            return this._handleDeactivationError(propagateDeactivationResult, binding.serviceIdentifier);
          }
        } catch (ex) {
          if (ex instanceof Error) {
            throw new Error(ERROR_MSGS.ON_DEACTIVATION_ERROR((0, serialization_1.getServiceIdentifierAsString)(binding.serviceIdentifier), ex.message));
          }
        }
      }
      async _handleDeactivationError(asyncResult, serviceIdentifier) {
        try {
          await asyncResult;
        } catch (ex) {
          if (ex instanceof Error) {
            throw new Error(ERROR_MSGS.ON_DEACTIVATION_ERROR((0, serialization_1.getServiceIdentifierAsString)(serviceIdentifier), ex.message));
          }
        }
      }
      _deactivateContainer(instance, deactivationsIterator) {
        let deactivation = deactivationsIterator.next();
        while (typeof deactivation.value === "function") {
          const result = deactivation.value(instance);
          if ((0, async_1.isPromise)(result)) {
            return result.then(async () => this._deactivateContainerAsync(instance, deactivationsIterator));
          }
          deactivation = deactivationsIterator.next();
        }
      }
      async _deactivateContainerAsync(instance, deactivationsIterator) {
        let deactivation = deactivationsIterator.next();
        while (typeof deactivation.value === "function") {
          await deactivation.value(instance);
          deactivation = deactivationsIterator.next();
        }
      }
      _getContainerModuleHelpersFactory() {
        const getBindFunction = (moduleId) => (serviceIdentifier) => {
          const binding = this._buildBinding(serviceIdentifier);
          binding.moduleId = moduleId;
          return this._bind(binding);
        };
        const getUnbindFunction = () => (serviceIdentifier) => {
          this.unbind(serviceIdentifier);
        };
        const getUnbindAsyncFunction = () => async (serviceIdentifier) => {
          return this.unbindAsync(serviceIdentifier);
        };
        const getIsboundFunction = () => (serviceIdentifier) => {
          return this.isBound(serviceIdentifier);
        };
        const getRebindFunction = (moduleId) => {
          const bind = getBindFunction(moduleId);
          return (serviceIdentifier) => {
            this.unbind(serviceIdentifier);
            return bind(serviceIdentifier);
          };
        };
        const getOnActivationFunction = (moduleId) => (serviceIdentifier, onActivation) => {
          this._moduleActivationStore.addActivation(moduleId, serviceIdentifier, onActivation);
          this.onActivation(serviceIdentifier, onActivation);
        };
        const getOnDeactivationFunction = (moduleId) => (serviceIdentifier, onDeactivation) => {
          this._moduleActivationStore.addDeactivation(moduleId, serviceIdentifier, onDeactivation);
          this.onDeactivation(serviceIdentifier, onDeactivation);
        };
        return (mId) => ({
          bindFunction: getBindFunction(mId),
          isboundFunction: getIsboundFunction(),
          onActivationFunction: getOnActivationFunction(mId),
          onDeactivationFunction: getOnDeactivationFunction(mId),
          rebindFunction: getRebindFunction(mId),
          unbindAsyncFunction: getUnbindAsyncFunction(),
          unbindFunction: getUnbindFunction()
        });
      }
      _bind(binding) {
        this._bindingDictionary.add(binding.serviceIdentifier, binding);
        return new binding_to_syntax_1.BindingToSyntax(binding);
      }
      _buildBinding(serviceIdentifier) {
        const scope = this.options.defaultScope || literal_types_1.BindingScopeEnum.Transient;
        return new binding_1.Binding(serviceIdentifier, scope);
      }
      async _getAll(getArgs) {
        return Promise.all(this._get(getArgs));
      }
      // Prepares arguments required for resolution and
      // delegates resolution to _middleware if available
      // otherwise it delegates resolution to _planAndResolve
      _get(getArgs) {
        const planAndResolveArgs = {
          ...getArgs,
          contextInterceptor: (context) => context,
          targetType: literal_types_1.TargetTypeEnum.Variable
        };
        if (this._middleware) {
          const middlewareResult = this._middleware(planAndResolveArgs);
          if (middlewareResult === void 0 || middlewareResult === null) {
            throw new Error(ERROR_MSGS.INVALID_MIDDLEWARE_RETURN);
          }
          return middlewareResult;
        }
        return this._planAndResolve()(planAndResolveArgs);
      }
      _getButThrowIfAsync(getArgs) {
        const result = this._get(getArgs);
        if ((0, async_1.isPromiseOrContainsPromise)(result)) {
          throw new Error(ERROR_MSGS.LAZY_IN_SYNC(getArgs.serviceIdentifier));
        }
        return result;
      }
      _getAllArgs(serviceIdentifier, options, isOptional) {
        const getAllArgs = {
          avoidConstraints: !((options == null ? void 0 : options.enforceBindingConstraints) ?? false),
          isMultiInject: true,
          isOptional,
          serviceIdentifier
        };
        return getAllArgs;
      }
      _getNotAllArgs(serviceIdentifier, isMultiInject, isOptional, key, value) {
        const getNotAllArgs = {
          avoidConstraints: false,
          isMultiInject,
          isOptional,
          key,
          serviceIdentifier,
          value
        };
        return getNotAllArgs;
      }
      _getPlanMetadataFromNextArgs(args) {
        const planMetadata = {
          isMultiInject: args.isMultiInject
        };
        if (args.key !== void 0) {
          planMetadata.customTag = {
            key: args.key,
            value: args.value
          };
        }
        if (args.isOptional === true) {
          planMetadata.isOptional = true;
        }
        return planMetadata;
      }
      // Planner creates a plan and Resolver resolves a plan
      // one of the jobs of the Container is to links the Planner
      // with the Resolver and that is what this function is about
      _planAndResolve() {
        return (args) => {
          let context = (0, planner_1.plan)(this._metadataReader, this, args.targetType, args.serviceIdentifier, this._getPlanMetadataFromNextArgs(args), args.avoidConstraints);
          context = args.contextInterceptor(context);
          const result = (0, resolver_1.resolve)(context);
          return result;
        };
      }
      _deactivateIfSingleton(binding) {
        if (!binding.activated) {
          return;
        }
        if ((0, async_1.isPromise)(binding.cache)) {
          return binding.cache.then((resolved) => this._deactivate(binding, resolved));
        }
        return this._deactivate(binding, binding.cache);
      }
      _deactivateSingletons(bindings) {
        for (const binding of bindings) {
          const result = this._deactivateIfSingleton(binding);
          if ((0, async_1.isPromise)(result)) {
            throw new Error(ERROR_MSGS.ASYNC_UNBIND_REQUIRED);
          }
        }
      }
      async _deactivateSingletonsAsync(bindings) {
        await Promise.all(bindings.map(async (b) => this._deactivateIfSingleton(b)));
      }
      _propagateContainerDeactivationThenBindingAndPreDestroy(binding, instance, constructor) {
        if (this.parent) {
          return this._deactivate.bind(this.parent)(binding, instance);
        } else {
          return this._bindingDeactivationAndPreDestroy(binding, instance, constructor);
        }
      }
      async _propagateContainerDeactivationThenBindingAndPreDestroyAsync(binding, instance, constructor) {
        if (this.parent) {
          await this._deactivate.bind(this.parent)(binding, instance);
        } else {
          await this._bindingDeactivationAndPreDestroyAsync(binding, instance, constructor);
        }
      }
      _removeServiceFromDictionary(serviceIdentifier) {
        try {
          this._bindingDictionary.remove(serviceIdentifier);
        } catch (_e) {
          throw new Error(`${ERROR_MSGS.CANNOT_UNBIND} ${(0, serialization_1.getServiceIdentifierAsString)(serviceIdentifier)}`);
        }
      }
      _bindingDeactivationAndPreDestroy(binding, instance, constructor) {
        if (typeof binding.onDeactivation === "function") {
          const result = binding.onDeactivation(instance);
          if ((0, async_1.isPromise)(result)) {
            return result.then(() => this._preDestroy(constructor, instance));
          }
        }
        return this._preDestroy(constructor, instance);
      }
      async _bindingDeactivationAndPreDestroyAsync(binding, instance, constructor) {
        if (typeof binding.onDeactivation === "function") {
          await binding.onDeactivation(instance);
        }
        await this._preDestroy(constructor, instance);
      }
    };
    exports.Container = Container;
  }
});

// ../../../node_modules/inversify/lib/cjs/container/container_module.js
var require_container_module = __commonJS({
  "../../../node_modules/inversify/lib/cjs/container/container_module.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsyncContainerModule = exports.ContainerModule = void 0;
    var id_1 = require_id();
    var ContainerModule = class {
      constructor(registry) {
        __publicField(this, "id");
        __publicField(this, "registry");
        this.id = (0, id_1.id)();
        this.registry = registry;
      }
    };
    exports.ContainerModule = ContainerModule;
    var AsyncContainerModule = class {
      constructor(registry) {
        __publicField(this, "id");
        __publicField(this, "registry");
        this.id = (0, id_1.id)();
        this.registry = registry;
      }
    };
    exports.AsyncContainerModule = AsyncContainerModule;
  }
});

// ../../../node_modules/inversify/lib/cjs/utils/js.js
var require_js = __commonJS({
  "../../../node_modules/inversify/lib/cjs/utils/js.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFirstArrayDuplicate = getFirstArrayDuplicate;
    function getFirstArrayDuplicate(array) {
      const seenValues = /* @__PURE__ */ new Set();
      for (const entry of array) {
        if (seenValues.has(entry)) {
          return entry;
        } else {
          seenValues.add(entry);
        }
      }
      return void 0;
    }
  }
});

// ../../../node_modules/inversify/lib/cjs/annotation/decorator_utils.js
var require_decorator_utils = __commonJS({
  "../../../node_modules/inversify/lib/cjs/annotation/decorator_utils.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorate = decorate;
    exports.tagParameter = tagParameter;
    exports.tagProperty = tagProperty;
    exports.createTaggedDecorator = createTaggedDecorator;
    var ERROR_MSGS = __importStar2(require_error_msgs());
    var METADATA_KEY = __importStar2(require_metadata_keys());
    var js_1 = require_js();
    function targetIsConstructorFunction(target) {
      return target.prototype !== void 0;
    }
    function _throwIfMethodParameter(parameterName) {
      if (parameterName !== void 0) {
        throw new Error(ERROR_MSGS.INVALID_DECORATOR_OPERATION);
      }
    }
    function tagParameter(annotationTarget, parameterName, parameterIndex, metadata) {
      _throwIfMethodParameter(parameterName);
      _tagParameterOrProperty(METADATA_KEY.TAGGED, annotationTarget, parameterIndex.toString(), metadata);
    }
    function tagProperty(annotationTarget, propertyName, metadata) {
      if (targetIsConstructorFunction(annotationTarget)) {
        throw new Error(ERROR_MSGS.INVALID_DECORATOR_OPERATION);
      }
      _tagParameterOrProperty(METADATA_KEY.TAGGED_PROP, annotationTarget.constructor, propertyName, metadata);
    }
    function _ensureNoMetadataKeyDuplicates(metadata) {
      let metadatas = [];
      if (Array.isArray(metadata)) {
        metadatas = metadata;
        const duplicate = (0, js_1.getFirstArrayDuplicate)(metadatas.map((md) => md.key));
        if (duplicate !== void 0) {
          throw new Error(`${ERROR_MSGS.DUPLICATED_METADATA} ${duplicate.toString()}`);
        }
      } else {
        metadatas = [metadata];
      }
      return metadatas;
    }
    function _tagParameterOrProperty(metadataKey, annotationTarget, key, metadata) {
      const metadatas = _ensureNoMetadataKeyDuplicates(metadata);
      let paramsOrPropertiesMetadata = {};
      if (Reflect.hasOwnMetadata(metadataKey, annotationTarget)) {
        paramsOrPropertiesMetadata = Reflect.getMetadata(metadataKey, annotationTarget);
      }
      let paramOrPropertyMetadata = paramsOrPropertiesMetadata[key];
      if (paramOrPropertyMetadata === void 0) {
        paramOrPropertyMetadata = [];
      } else {
        for (const m of paramOrPropertyMetadata) {
          if (metadatas.some((md) => md.key === m.key)) {
            throw new Error(`${ERROR_MSGS.DUPLICATED_METADATA} ${m.key.toString()}`);
          }
        }
      }
      paramOrPropertyMetadata.push(...metadatas);
      paramsOrPropertiesMetadata[key] = paramOrPropertyMetadata;
      Reflect.defineMetadata(metadataKey, paramsOrPropertiesMetadata, annotationTarget);
    }
    function createTaggedDecorator(metadata) {
      return (target, targetKey, indexOrPropertyDescriptor) => {
        if (typeof indexOrPropertyDescriptor === "number") {
          tagParameter(target, targetKey, indexOrPropertyDescriptor, metadata);
        } else {
          tagProperty(target, targetKey, metadata);
        }
      };
    }
    function _decorate(decorators, target) {
      Reflect.decorate(decorators, target);
    }
    function _param(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    }
    function decorate(decorator, target, parameterIndexOrProperty) {
      if (typeof parameterIndexOrProperty === "number") {
        _decorate([_param(parameterIndexOrProperty, decorator)], target);
      } else if (typeof parameterIndexOrProperty === "string") {
        Reflect.decorate([decorator], target, parameterIndexOrProperty);
      } else {
        _decorate([decorator], target);
      }
    }
  }
});

// ../../../node_modules/inversify/lib/cjs/annotation/injectable.js
var require_injectable = __commonJS({
  "../../../node_modules/inversify/lib/cjs/annotation/injectable.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.injectable = injectable;
    var ERRORS_MSGS = __importStar2(require_error_msgs());
    var METADATA_KEY = __importStar2(require_metadata_keys());
    function injectable() {
      return function(target) {
        if (Reflect.hasOwnMetadata(METADATA_KEY.PARAM_TYPES, target)) {
          throw new Error(ERRORS_MSGS.DUPLICATED_INJECTABLE_DECORATOR);
        }
        const types = Reflect.getMetadata(METADATA_KEY.DESIGN_PARAM_TYPES, target) || [];
        Reflect.defineMetadata(METADATA_KEY.PARAM_TYPES, types, target);
        return target;
      };
    }
  }
});

// ../../../node_modules/inversify/lib/cjs/annotation/tagged.js
var require_tagged = __commonJS({
  "../../../node_modules/inversify/lib/cjs/annotation/tagged.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tagged = tagged;
    var metadata_1 = require_metadata();
    var decorator_utils_1 = require_decorator_utils();
    function tagged(metadataKey, metadataValue) {
      return (0, decorator_utils_1.createTaggedDecorator)(new metadata_1.Metadata(metadataKey, metadataValue));
    }
  }
});

// ../../../node_modules/inversify/lib/cjs/annotation/named.js
var require_named = __commonJS({
  "../../../node_modules/inversify/lib/cjs/annotation/named.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.named = named;
    var METADATA_KEY = __importStar2(require_metadata_keys());
    var metadata_1 = require_metadata();
    var decorator_utils_1 = require_decorator_utils();
    function named(name) {
      return (0, decorator_utils_1.createTaggedDecorator)(new metadata_1.Metadata(METADATA_KEY.NAMED_TAG, name));
    }
  }
});

// ../../../node_modules/inversify/lib/cjs/annotation/inject_base.js
var require_inject_base = __commonJS({
  "../../../node_modules/inversify/lib/cjs/annotation/inject_base.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.injectBase = injectBase;
    var error_msgs_1 = require_error_msgs();
    var metadata_1 = require_metadata();
    var decorator_utils_1 = require_decorator_utils();
    function injectBase(metadataKey) {
      return (serviceIdentifier) => {
        return (target, targetKey, indexOrPropertyDescriptor) => {
          if (serviceIdentifier === void 0) {
            const className = typeof target === "function" ? target.name : target.constructor.name;
            throw new Error((0, error_msgs_1.UNDEFINED_INJECT_ANNOTATION)(className));
          }
          (0, decorator_utils_1.createTaggedDecorator)(new metadata_1.Metadata(metadataKey, serviceIdentifier))(target, targetKey, indexOrPropertyDescriptor);
        };
      };
    }
  }
});

// ../../../node_modules/inversify/lib/cjs/annotation/inject.js
var require_inject = __commonJS({
  "../../../node_modules/inversify/lib/cjs/annotation/inject.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.inject = void 0;
    var METADATA_KEY = __importStar2(require_metadata_keys());
    var inject_base_1 = require_inject_base();
    var inject = (0, inject_base_1.injectBase)(METADATA_KEY.INJECT_TAG);
    exports.inject = inject;
  }
});

// ../../../node_modules/inversify/lib/cjs/annotation/optional.js
var require_optional = __commonJS({
  "../../../node_modules/inversify/lib/cjs/annotation/optional.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.optional = optional;
    var METADATA_KEY = __importStar2(require_metadata_keys());
    var metadata_1 = require_metadata();
    var decorator_utils_1 = require_decorator_utils();
    function optional() {
      return (0, decorator_utils_1.createTaggedDecorator)(new metadata_1.Metadata(METADATA_KEY.OPTIONAL_TAG, true));
    }
  }
});

// ../../../node_modules/inversify/lib/cjs/annotation/unmanaged.js
var require_unmanaged = __commonJS({
  "../../../node_modules/inversify/lib/cjs/annotation/unmanaged.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.unmanaged = unmanaged;
    var METADATA_KEY = __importStar2(require_metadata_keys());
    var metadata_1 = require_metadata();
    var decorator_utils_1 = require_decorator_utils();
    function unmanaged() {
      return function(target, targetKey, index) {
        const metadata = new metadata_1.Metadata(METADATA_KEY.UNMANAGED_TAG, true);
        (0, decorator_utils_1.tagParameter)(target, targetKey, index, metadata);
      };
    }
  }
});

// ../../../node_modules/inversify/lib/cjs/annotation/multi_inject.js
var require_multi_inject = __commonJS({
  "../../../node_modules/inversify/lib/cjs/annotation/multi_inject.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.multiInject = void 0;
    var METADATA_KEY = __importStar2(require_metadata_keys());
    var inject_base_1 = require_inject_base();
    var multiInject = (0, inject_base_1.injectBase)(METADATA_KEY.MULTI_INJECT_TAG);
    exports.multiInject = multiInject;
  }
});

// ../../../node_modules/inversify/lib/cjs/annotation/target_name.js
var require_target_name = __commonJS({
  "../../../node_modules/inversify/lib/cjs/annotation/target_name.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.targetName = targetName;
    var METADATA_KEY = __importStar2(require_metadata_keys());
    var metadata_1 = require_metadata();
    var decorator_utils_1 = require_decorator_utils();
    function targetName(name) {
      return function(target, targetKey, index) {
        const metadata = new metadata_1.Metadata(METADATA_KEY.NAME_TAG, name);
        (0, decorator_utils_1.tagParameter)(target, targetKey, index, metadata);
      };
    }
  }
});

// ../../../node_modules/inversify/lib/cjs/annotation/property_event_decorator.js
var require_property_event_decorator = __commonJS({
  "../../../node_modules/inversify/lib/cjs/annotation/property_event_decorator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.propertyEventDecorator = propertyEventDecorator;
    var metadata_1 = require_metadata();
    function propertyEventDecorator(eventKey, errorMessage) {
      return () => {
        return (target, propertyKey) => {
          const metadata = new metadata_1.Metadata(eventKey, propertyKey);
          if (Reflect.hasOwnMetadata(eventKey, target.constructor)) {
            throw new Error(errorMessage);
          }
          Reflect.defineMetadata(eventKey, metadata, target.constructor);
        };
      };
    }
  }
});

// ../../../node_modules/inversify/lib/cjs/annotation/post_construct.js
var require_post_construct = __commonJS({
  "../../../node_modules/inversify/lib/cjs/annotation/post_construct.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.postConstruct = void 0;
    var ERRORS_MSGS = __importStar2(require_error_msgs());
    var METADATA_KEY = __importStar2(require_metadata_keys());
    var property_event_decorator_1 = require_property_event_decorator();
    var postConstruct = (0, property_event_decorator_1.propertyEventDecorator)(METADATA_KEY.POST_CONSTRUCT, ERRORS_MSGS.MULTIPLE_POST_CONSTRUCT_METHODS);
    exports.postConstruct = postConstruct;
  }
});

// ../../../node_modules/inversify/lib/cjs/annotation/pre_destroy.js
var require_pre_destroy = __commonJS({
  "../../../node_modules/inversify/lib/cjs/annotation/pre_destroy.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.preDestroy = void 0;
    var ERRORS_MSGS = __importStar2(require_error_msgs());
    var METADATA_KEY = __importStar2(require_metadata_keys());
    var property_event_decorator_1 = require_property_event_decorator();
    var preDestroy = (0, property_event_decorator_1.propertyEventDecorator)(METADATA_KEY.PRE_DESTROY, ERRORS_MSGS.MULTIPLE_PRE_DESTROY_METHODS);
    exports.preDestroy = preDestroy;
  }
});

// ../../../node_modules/inversify/lib/cjs/index.js
var require_cjs4 = __commonJS({
  "../../../node_modules/inversify/lib/cjs/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod, k[i]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.multiBindToService = exports.getServiceIdentifierAsString = exports.typeConstraint = exports.namedConstraint = exports.taggedConstraint = exports.traverseAncerstors = exports.decorate = exports.id = exports.MetadataReader = exports.preDestroy = exports.postConstruct = exports.targetName = exports.multiInject = exports.unmanaged = exports.optional = exports.inject = exports.named = exports.tagged = exports.injectable = exports.createTaggedDecorator = exports.ContainerModule = exports.AsyncContainerModule = exports.TargetTypeEnum = exports.BindingTypeEnum = exports.BindingScopeEnum = exports.Container = exports.METADATA_KEY = exports.LazyServiceIdentifer = exports.LazyServiceIdentifier = void 0;
    require_Reflect();
    var common_1 = require_cjs();
    var keys = __importStar2(require_metadata_keys());
    var common_2 = require_cjs();
    Object.defineProperty(exports, "LazyServiceIdentifier", { enumerable: true, get: function() {
      return common_2.LazyServiceIdentifier;
    } });
    exports.LazyServiceIdentifer = common_1.LazyServiceIdentifier;
    exports.METADATA_KEY = keys;
    var container_1 = require_container();
    Object.defineProperty(exports, "Container", { enumerable: true, get: function() {
      return container_1.Container;
    } });
    var literal_types_1 = require_literal_types();
    Object.defineProperty(exports, "BindingScopeEnum", { enumerable: true, get: function() {
      return literal_types_1.BindingScopeEnum;
    } });
    Object.defineProperty(exports, "BindingTypeEnum", { enumerable: true, get: function() {
      return literal_types_1.BindingTypeEnum;
    } });
    Object.defineProperty(exports, "TargetTypeEnum", { enumerable: true, get: function() {
      return literal_types_1.TargetTypeEnum;
    } });
    var container_module_1 = require_container_module();
    Object.defineProperty(exports, "AsyncContainerModule", { enumerable: true, get: function() {
      return container_module_1.AsyncContainerModule;
    } });
    Object.defineProperty(exports, "ContainerModule", { enumerable: true, get: function() {
      return container_module_1.ContainerModule;
    } });
    var decorator_utils_1 = require_decorator_utils();
    Object.defineProperty(exports, "createTaggedDecorator", { enumerable: true, get: function() {
      return decorator_utils_1.createTaggedDecorator;
    } });
    var injectable_1 = require_injectable();
    Object.defineProperty(exports, "injectable", { enumerable: true, get: function() {
      return injectable_1.injectable;
    } });
    var tagged_1 = require_tagged();
    Object.defineProperty(exports, "tagged", { enumerable: true, get: function() {
      return tagged_1.tagged;
    } });
    var named_1 = require_named();
    Object.defineProperty(exports, "named", { enumerable: true, get: function() {
      return named_1.named;
    } });
    var inject_1 = require_inject();
    Object.defineProperty(exports, "inject", { enumerable: true, get: function() {
      return inject_1.inject;
    } });
    var optional_1 = require_optional();
    Object.defineProperty(exports, "optional", { enumerable: true, get: function() {
      return optional_1.optional;
    } });
    var unmanaged_1 = require_unmanaged();
    Object.defineProperty(exports, "unmanaged", { enumerable: true, get: function() {
      return unmanaged_1.unmanaged;
    } });
    var multi_inject_1 = require_multi_inject();
    Object.defineProperty(exports, "multiInject", { enumerable: true, get: function() {
      return multi_inject_1.multiInject;
    } });
    var target_name_1 = require_target_name();
    Object.defineProperty(exports, "targetName", { enumerable: true, get: function() {
      return target_name_1.targetName;
    } });
    var post_construct_1 = require_post_construct();
    Object.defineProperty(exports, "postConstruct", { enumerable: true, get: function() {
      return post_construct_1.postConstruct;
    } });
    var pre_destroy_1 = require_pre_destroy();
    Object.defineProperty(exports, "preDestroy", { enumerable: true, get: function() {
      return pre_destroy_1.preDestroy;
    } });
    var metadata_reader_1 = require_metadata_reader();
    Object.defineProperty(exports, "MetadataReader", { enumerable: true, get: function() {
      return metadata_reader_1.MetadataReader;
    } });
    var id_1 = require_id();
    Object.defineProperty(exports, "id", { enumerable: true, get: function() {
      return id_1.id;
    } });
    var decorator_utils_2 = require_decorator_utils();
    Object.defineProperty(exports, "decorate", { enumerable: true, get: function() {
      return decorator_utils_2.decorate;
    } });
    var constraint_helpers_1 = require_constraint_helpers();
    Object.defineProperty(exports, "traverseAncerstors", { enumerable: true, get: function() {
      return constraint_helpers_1.traverseAncerstors;
    } });
    Object.defineProperty(exports, "taggedConstraint", { enumerable: true, get: function() {
      return constraint_helpers_1.taggedConstraint;
    } });
    Object.defineProperty(exports, "namedConstraint", { enumerable: true, get: function() {
      return constraint_helpers_1.namedConstraint;
    } });
    Object.defineProperty(exports, "typeConstraint", { enumerable: true, get: function() {
      return constraint_helpers_1.typeConstraint;
    } });
    var serialization_1 = require_serialization();
    Object.defineProperty(exports, "getServiceIdentifierAsString", { enumerable: true, get: function() {
      return serialization_1.getServiceIdentifierAsString;
    } });
    var binding_utils_1 = require_binding_utils();
    Object.defineProperty(exports, "multiBindToService", { enumerable: true, get: function() {
      return binding_utils_1.multiBindToService;
    } });
  }
});

// ../../../node_modules/@theia/core/lib/common/logger-protocol.js
var require_logger_protocol = __commonJS({
  "../../../node_modules/@theia/core/lib/common/logger-protocol.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConsoleLogger = exports.LogLevel = exports.rootLoggerName = exports.DispatchingLoggerClient = exports.ILoggerClient = exports.loggerPath = exports.ILoggerServer = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var inversify_1 = require_cjs4();
    exports.ILoggerServer = Symbol("ILoggerServer");
    exports.loggerPath = "/services/logger";
    exports.ILoggerClient = Symbol("ILoggerClient");
    var DispatchingLoggerClient = class DispatchingLoggerClient {
      constructor() {
        this.clients = /* @__PURE__ */ new Set();
      }
      onLogLevelChanged(event) {
        this.clients.forEach((client) => client.onLogLevelChanged(event));
      }
      onLogConfigChanged() {
        this.clients.forEach((client) => client.onLogConfigChanged());
      }
    };
    exports.DispatchingLoggerClient = DispatchingLoggerClient;
    exports.DispatchingLoggerClient = DispatchingLoggerClient = tslib_1.__decorate([
      (0, inversify_1.injectable)()
    ], DispatchingLoggerClient);
    exports.rootLoggerName = "root";
    var LogLevel;
    (function(LogLevel2) {
      LogLevel2[LogLevel2["FATAL"] = 60] = "FATAL";
      LogLevel2[LogLevel2["ERROR"] = 50] = "ERROR";
      LogLevel2[LogLevel2["WARN"] = 40] = "WARN";
      LogLevel2[LogLevel2["INFO"] = 30] = "INFO";
      LogLevel2[LogLevel2["DEBUG"] = 20] = "DEBUG";
      LogLevel2[LogLevel2["TRACE"] = 10] = "TRACE";
    })(LogLevel || (exports.LogLevel = LogLevel = {}));
    (function(LogLevel2) {
      LogLevel2.strings = /* @__PURE__ */ new Map([
        [LogLevel2.FATAL, "fatal"],
        [LogLevel2.ERROR, "error"],
        [LogLevel2.WARN, "warn"],
        [LogLevel2.INFO, "info"],
        [LogLevel2.DEBUG, "debug"],
        [LogLevel2.TRACE, "trace"]
      ]);
      function toString(level) {
        return LogLevel2.strings.get(level);
      }
      LogLevel2.toString = toString;
      function fromString(levelStr) {
        for (const pair of LogLevel2.strings) {
          if (pair[1] === levelStr) {
            return pair[0];
          }
        }
        return void 0;
      }
      LogLevel2.fromString = fromString;
    })(LogLevel || (exports.LogLevel = LogLevel = {}));
    var ConsoleLogger;
    (function(ConsoleLogger2) {
      const originalConsoleLog = console.log;
      const consoles = /* @__PURE__ */ new Map([
        [LogLevel.FATAL, console.error],
        [LogLevel.ERROR, console.error],
        [LogLevel.WARN, console.warn],
        [LogLevel.INFO, console.info],
        [LogLevel.DEBUG, console.debug],
        [LogLevel.TRACE, console.trace]
      ]);
      function reset() {
        console.error = consoles.get(LogLevel.ERROR);
        console.warn = consoles.get(LogLevel.WARN);
        console.info = consoles.get(LogLevel.INFO);
        console.debug = consoles.get(LogLevel.DEBUG);
        console.trace = consoles.get(LogLevel.TRACE);
        console.log = originalConsoleLog;
      }
      ConsoleLogger2.reset = reset;
      function log(name, logLevel, message, params) {
        const console2 = consoles.get(logLevel) || originalConsoleLog;
        const severity = (LogLevel.strings.get(logLevel) || "unknown").toUpperCase();
        const now = /* @__PURE__ */ new Date();
        const formattedMessage = `${now.toISOString()} ${name} ${severity} ${message}`;
        console2(formattedMessage, ...params);
        return formattedMessage;
      }
      ConsoleLogger2.log = log;
    })(ConsoleLogger || (exports.ConsoleLogger = ConsoleLogger = {}));
  }
});
export default require_logger_protocol();
/*! Bundled license information:

reflect-metadata/Reflect.js:
  (*! *****************************************************************************
  Copyright (C) Microsoft. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0
  
  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.
  
  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** *)
*/
//# sourceMappingURL=@theia_core_lib_common_logger-protocol.js.map
